
pump_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a24  08005a24  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  08005a24  08005a24  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a24  08005a24  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08005a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000230  08005c5c  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08005c5c  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f88a  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002441  00000000  00000000  0002fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c18  00000000  00000000  00032ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178a5  00000000  00000000  00033af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010016  00000000  00000000  0004b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089a1e  00000000  00000000  0005b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e4  00000000  00000000  000e4dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e90b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	080059e0 	.word	0x080059e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	080059e0 	.word	0x080059e0

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	bf28      	it	cs
 8000b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b54:	d2ed      	bcs.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__gesf2>:
 8000cb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cb4:	e006      	b.n	8000cc4 <__cmpsf2+0x4>
 8000cb6:	bf00      	nop

08000cb8 <__lesf2>:
 8000cb8:	f04f 0c01 	mov.w	ip, #1
 8000cbc:	e002      	b.n	8000cc4 <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__cmpsf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ccc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cda:	d011      	beq.n	8000d00 <__cmpsf2+0x40>
 8000cdc:	b001      	add	sp, #4
 8000cde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ce2:	bf18      	it	ne
 8000ce4:	ea90 0f01 	teqne	r0, r1
 8000ce8:	bf58      	it	pl
 8000cea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cee:	bf88      	it	hi
 8000cf0:	17c8      	asrhi	r0, r1, #31
 8000cf2:	bf38      	it	cc
 8000cf4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cf8:	bf18      	it	ne
 8000cfa:	f040 0001 	orrne.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	d102      	bne.n	8000d0c <__cmpsf2+0x4c>
 8000d06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d0a:	d105      	bne.n	8000d18 <__cmpsf2+0x58>
 8000d0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d10:	d1e4      	bne.n	8000cdc <__cmpsf2+0x1c>
 8000d12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d16:	d0e1      	beq.n	8000cdc <__cmpsf2+0x1c>
 8000d18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_cfrcmple>:
 8000d20:	4684      	mov	ip, r0
 8000d22:	4608      	mov	r0, r1
 8000d24:	4661      	mov	r1, ip
 8000d26:	e7ff      	b.n	8000d28 <__aeabi_cfcmpeq>

08000d28 <__aeabi_cfcmpeq>:
 8000d28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d2a:	f7ff ffc9 	bl	8000cc0 <__cmpsf2>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	bf48      	it	mi
 8000d32:	f110 0f00 	cmnmi.w	r0, #0
 8000d36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d38 <__aeabi_fcmpeq>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff fff4 	bl	8000d28 <__aeabi_cfcmpeq>
 8000d40:	bf0c      	ite	eq
 8000d42:	2001      	moveq	r0, #1
 8000d44:	2000      	movne	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmplt>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffea 	bl	8000d28 <__aeabi_cfcmpeq>
 8000d54:	bf34      	ite	cc
 8000d56:	2001      	movcc	r0, #1
 8000d58:	2000      	movcs	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_fcmple>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff ffe0 	bl	8000d28 <__aeabi_cfcmpeq>
 8000d68:	bf94      	ite	ls
 8000d6a:	2001      	movls	r0, #1
 8000d6c:	2000      	movhi	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_fcmpge>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffd2 	bl	8000d20 <__aeabi_cfrcmple>
 8000d7c:	bf94      	ite	ls
 8000d7e:	2001      	movls	r0, #1
 8000d80:	2000      	movhi	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_fcmpgt>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffc8 	bl	8000d20 <__aeabi_cfrcmple>
 8000d90:	bf34      	ite	cc
 8000d92:	2001      	movcc	r0, #1
 8000d94:	2000      	movcs	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_f2iz>:
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da4:	d30f      	bcc.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000da6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d90d      	bls.n	8000dcc <__aeabi_f2iz+0x30>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc0:	bf18      	it	ne
 8000dc2:	4240      	negne	r0, r0
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2iz+0x3a>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d105      	bne.n	8000de2 <__aeabi_f2iz+0x46>
 8000dd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]

  while (length--)
 8000df8:	e022      	b.n	8000e40 <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 8; i; i--)
 8000e04:	2308      	movs	r3, #8
 8000e06:	737b      	strb	r3, [r7, #13]
 8000e08:	e017      	b.n	8000e3a <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	4053      	eors	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	085b      	lsrs	r3, r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]

      if (temp)
 8000e1e:	7b3b      	ldrb	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]
      }

      currentByte >>= 1;
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	085b      	lsrs	r3, r3, #1
 8000e32:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	737b      	strb	r3, [r7, #13]
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e4      	bne.n	8000e0a <CalculateChecksum+0x22>
  while (length--)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	1e5a      	subs	r2, r3, #1
 8000e44:	70fa      	strb	r2, [r7, #3]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1d7      	bne.n	8000dfa <CalculateChecksum+0x12>
    }
  }

  return checksum;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e044      	b.n	8000ef8 <ExecuteCommand+0xa2>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	7a3a      	ldrb	r2, [r7, #8]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 ffee 	bl	8001e58 <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 8000e7c:	7a7b      	ldrb	r3, [r7, #9]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d026      	beq.n	8000ed0 <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	75fb      	strb	r3, [r7, #23]
 8000e86:	e00c      	b.n	8000ea2 <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6858      	ldr	r0, [r3, #4]
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	18d4      	adds	r4, r2, r3
 8000e92:	21ff      	movs	r1, #255	; 0xff
 8000e94:	f000 ffe0 	bl	8001e58 <OneWire_ProcessByte>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	7a7b      	ldrb	r3, [r7, #9]
 8000ea4:	7dfa      	ldrb	r2, [r7, #23]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d3ee      	bcc.n	8000e88 <ExecuteCommand+0x32>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8000eaa:	7a7b      	ldrb	r3, [r7, #9]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff98 	bl	8000de8 <CalculateChecksum>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	7d7a      	ldrb	r2, [r7, #21]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d014      	beq.n	8000ef6 <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e013      	b.n	8000ef8 <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75bb      	strb	r3, [r7, #22]
 8000ed4:	e00b      	b.n	8000eee <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6858      	ldr	r0, [r3, #4]
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f000 ffb8 	bl	8001e58 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000ee8:	7dbb      	ldrb	r3, [r7, #22]
 8000eea:	3301      	adds	r3, #1
 8000eec:	75bb      	strb	r3, [r7, #22]
 8000eee:	7abb      	ldrb	r3, [r7, #10]
 8000ef0:	7dba      	ldrb	r2, [r7, #22]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3ef      	bcc.n	8000ed6 <ExecuteCommand+0x80>
    }
  }

  return DS18B20_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd90      	pop	{r4, r7, pc}

08000f00 <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ff80 	bl	8001e14 <OneWire_ProcessBit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8000f18:	e007      	b.n	8000f2a <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 ff77 	bl	8001e14 <OneWire_ProcessBit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2bff      	cmp	r3, #255	; 0xff
 8000f2e:	d1f4      	bne.n	8000f1a <WaitForConversionFinished+0x1a>
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 8000f48:	f107 030a 	add.w	r3, r7, #10
 8000f4c:	491c      	ldr	r1, [pc, #112]	; (8000fc0 <DS18B20_ConvertT+0x84>)
 8000f4e:	461a      	mov	r2, r3
 8000f50:	6809      	ldr	r1, [r1, #0]
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff7f 	bl	8000e56 <ExecuteCommand>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	72fb      	strb	r3, [r7, #11]

  if (waitCondition == DS18B20_DATA)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffcc 	bl	8000f00 <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d122      	bne.n	8000fb4 <DS18B20_ConvertT+0x78>
  {
    uint32_t delayValueMs = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7c1b      	ldrb	r3, [r3, #16]
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d014      	beq.n	8000fa4 <DS18B20_ConvertT+0x68>
 8000f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7c:	dc16      	bgt.n	8000fac <DS18B20_ConvertT+0x70>
 8000f7e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f80:	d00c      	beq.n	8000f9c <DS18B20_ConvertT+0x60>
 8000f82:	2b5f      	cmp	r3, #95	; 0x5f
 8000f84:	dc12      	bgt.n	8000fac <DS18B20_ConvertT+0x70>
 8000f86:	2b1f      	cmp	r3, #31
 8000f88:	d002      	beq.n	8000f90 <DS18B20_ConvertT+0x54>
 8000f8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8c:	d003      	beq.n	8000f96 <DS18B20_ConvertT+0x5a>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 8000f8e:	e00d      	b.n	8000fac <DS18B20_ConvertT+0x70>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 8000f90:	235e      	movs	r3, #94	; 0x5e
 8000f92:	60fb      	str	r3, [r7, #12]
        break;
 8000f94:	e00b      	b.n	8000fae <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 8000f96:	23bc      	movs	r3, #188	; 0xbc
 8000f98:	60fb      	str	r3, [r7, #12]
        break;
 8000f9a:	e008      	b.n	8000fae <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 8000f9c:	f240 1377 	movw	r3, #375	; 0x177
 8000fa0:	60fb      	str	r3, [r7, #12]
        break;
 8000fa2:	e004      	b.n	8000fae <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8000fa4:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000fa8:	60fb      	str	r3, [r7, #12]
        break;
 8000faa:	e000      	b.n	8000fae <DS18B20_ConvertT+0x72>
        break;
 8000fac:	bf00      	nop
    }

    HAL_Delay(delayValueMs);
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f001 fea4 	bl	8002cfc <HAL_Delay>
  }

  return result;
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000010 	.word	0x20000010

08000fc4 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4938      	ldr	r1, [pc, #224]	; (80010b4 <DS18B20_ReadScratchpad+0xf0>)
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6809      	ldr	r1, [r1, #0]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff3d 	bl	8000e56 <ExecuteCommand>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	757b      	strb	r3, [r7, #21]

  if (result != DS18B20_OK)
 8000fe0:	7d7b      	ldrb	r3, [r7, #21]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <DS18B20_ReadScratchpad+0x26>
  {
    return result;
 8000fe6:	7d7b      	ldrb	r3, [r7, #21]
 8000fe8:	e060      	b.n	80010ac <DS18B20_ReadScratchpad+0xe8>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8000fea:	7aba      	ldrb	r2, [r7, #10]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 8000ff0:	7afa      	ldrb	r2, [r7, #11]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8000ff6:	7b3a      	ldrb	r2, [r7, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 800100c:	8afb      	ldrh	r3, [r7, #22]
 800100e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001012:	f023 0307 	bic.w	r3, r3, #7
 8001016:	827b      	strh	r3, [r7, #18]

  if (sign != 0)
 8001018:	8a7b      	ldrh	r3, [r7, #18]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <DS18B20_ReadScratchpad+0x60>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 800101e:	8afb      	ldrh	r3, [r7, #22]
 8001020:	425b      	negs	r3, r3
 8001022:	82fb      	strh	r3, [r7, #22]
  }

  switch (sensor->configRegister)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7c1b      	ldrb	r3, [r3, #16]
 8001028:	2b7f      	cmp	r3, #127	; 0x7f
 800102a:	d01d      	beq.n	8001068 <DS18B20_ReadScratchpad+0xa4>
 800102c:	2b7f      	cmp	r3, #127	; 0x7f
 800102e:	dc20      	bgt.n	8001072 <DS18B20_ReadScratchpad+0xae>
 8001030:	2b5f      	cmp	r3, #95	; 0x5f
 8001032:	d012      	beq.n	800105a <DS18B20_ReadScratchpad+0x96>
 8001034:	2b5f      	cmp	r3, #95	; 0x5f
 8001036:	dc1c      	bgt.n	8001072 <DS18B20_ReadScratchpad+0xae>
 8001038:	2b1f      	cmp	r3, #31
 800103a:	d002      	beq.n	8001042 <DS18B20_ReadScratchpad+0x7e>
 800103c:	2b3f      	cmp	r3, #63	; 0x3f
 800103e:	d005      	beq.n	800104c <DS18B20_ReadScratchpad+0x88>
 8001040:	e017      	b.n	8001072 <DS18B20_ReadScratchpad+0xae>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001048:	82fb      	strh	r3, [r7, #22]
      break;
 800104a:	e017      	b.n	800107c <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 800104c:	8afb      	ldrh	r3, [r7, #22]
 800104e:	f023 0303 	bic.w	r3, r3, #3
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	0d5b      	lsrs	r3, r3, #21
 8001056:	82fb      	strh	r3, [r7, #22]
      break;
 8001058:	e010      	b.n	800107c <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 800105a:	8afb      	ldrh	r3, [r7, #22]
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	055b      	lsls	r3, r3, #21
 8001062:	0d5b      	lsrs	r3, r3, #21
 8001064:	82fb      	strh	r3, [r7, #22]
      break;
 8001066:	e009      	b.n	800107c <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001068:	8afb      	ldrh	r3, [r7, #22]
 800106a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800106e:	82fb      	strh	r3, [r7, #22]
      break;
 8001070:	e004      	b.n	800107c <DS18B20_ReadScratchpad+0xb8>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001078:	82fb      	strh	r3, [r7, #22]
      break;
 800107a:	bf00      	nop
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 800107c:	8afb      	ldrh	r3, [r7, #22]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fdbe 	bl	8000c00 <__aeabi_ui2f>
 8001084:	4603      	mov	r3, r0
 8001086:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f860 	bl	8000150 <__aeabi_fmul>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 8001098:	8a7b      	ldrh	r3, [r7, #18]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <DS18B20_ReadScratchpad+0xe6>
  {
    sensor->temperature *= (-1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000008 	.word	0x20000008

080010b8 <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <DS18B20_WriteScratchpad+0x48>)
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff fec4 	bl	8000e56 <ExecuteCommand>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <DS18B20_WriteScratchpad+0x24>
  {
    return result;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	e00c      	b.n	80010f6 <DS18B20_WriteScratchpad+0x3e>
  }

  sensor->temperatureLimitHigh = data[0];
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = data[1];
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	785a      	ldrb	r2, [r3, #1]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = data[2];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	789a      	ldrb	r2, [r3, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	741a      	strb	r2, [r3, #16]

  return result;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c

08001104 <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e012      	b.n	800113e <DS18B20_InitializationCommand+0x3a>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fed1 	bl	8001ec4 <OneWire_Reset>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]

  if (status == ONEWIRE_OK)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d104      	bne.n	8001136 <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e003      	b.n	800113e <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 800113c:	2301      	movs	r3, #1
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4912      	ldr	r1, [pc, #72]	; (80011a0 <DS18B20_ReadRom+0x58>)
 8001156:	461a      	mov	r2, r3
 8001158:	6809      	ldr	r1, [r1, #0]
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fe7b 	bl	8000e56 <ExecuteCommand>
 8001160:	4603      	mov	r3, r0
 8001162:	75bb      	strb	r3, [r7, #22]

  if (result != DS18B20_OK)
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <DS18B20_ReadRom+0x26>
  {
    return result;
 800116a:	7dbb      	ldrb	r3, [r7, #22]
 800116c:	e014      	b.n	8001198 <DS18B20_ReadRom+0x50>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]
 8001172:	e00d      	b.n	8001190 <DS18B20_ReadRom+0x48>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	3218      	adds	r2, #24
 800117c:	443a      	add	r2, r7
 800117e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	460a      	mov	r2, r1
 8001188:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	3301      	adds	r3, #1
 800118e:	75fb      	strb	r3, [r7, #23]
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d9ee      	bls.n	8001174 <DS18B20_ReadRom+0x2c>
  }

  return DS18B20_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000

080011a4 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 80011ac:	f107 030e 	add.w	r3, r7, #14
 80011b0:	4908      	ldr	r1, [pc, #32]	; (80011d4 <DS18B20_SkipRom+0x30>)
 80011b2:	461a      	mov	r2, r3
 80011b4:	6809      	ldr	r1, [r1, #0]
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe4d 	bl	8000e56 <ExecuteCommand>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <DS18B20_SkipRom+0x26>
  {
    return result;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	e000      	b.n	80011cc <DS18B20_SkipRom+0x28>
  }

  return DS18B20_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000004 	.word	0x20000004

080011d8 <DS18B20_Init>:



/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <config_temperature_sensor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void config_temperature_sensor(DS18B20 *sensor) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	DS18B20_InitializationCommand(sensor);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff7c 	bl	8001104 <DS18B20_InitializationCommand>
	DS18B20_ReadRom(sensor);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff9b 	bl	8001148 <DS18B20_ReadRom>
	DS18B20_ReadScratchpad(sensor);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fed6 	bl	8000fc4 <DS18B20_ReadScratchpad>
	uint8_t settings[3];
	settings[0] = sensor->temperatureLimitHigh;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7bdb      	ldrb	r3, [r3, #15]
 800121c:	733b      	strb	r3, [r7, #12]
	settings[1] = sensor->temperatureLimitLow;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	737b      	strb	r3, [r7, #13]
	settings[2] = DS18B20_12_BITS_CONFIG;
 8001224:	237f      	movs	r3, #127	; 0x7f
 8001226:	73bb      	strb	r3, [r7, #14]
	DS18B20_InitializationCommand(sensor);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff6b 	bl	8001104 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(sensor);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffb8 	bl	80011a4 <DS18B20_SkipRom>
	DS18B20_WriteScratchpad(sensor, settings);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff3c 	bl	80010b8 <DS18B20_WriteScratchpad>
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <start_temperature_measure>:

void start_temperature_measure(DS18B20 *sensor) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	DS18B20_InitializationCommand(sensor);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff57 	bl	8001104 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(sensor);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa4 	bl	80011a4 <DS18B20_SkipRom>
	DS18B20_ConvertT(sensor, DS18B20_NONE);
 800125c:	2100      	movs	r1, #0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe6c 	bl	8000f3c <DS18B20_ConvertT>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <stop_temperature_measure>:

void stop_temperature_measure(DS18B20 *sensor) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	DS18B20_InitializationCommand(sensor);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff45 	bl	8001104 <DS18B20_InitializationCommand>
	DS18B20_SkipRom(sensor);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff92 	bl	80011a4 <DS18B20_SkipRom>
	DS18B20_ReadScratchpad(sensor);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fe9f 	bl	8000fc4 <DS18B20_ReadScratchpad>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <check_leak_sensor>:

void check_leak_sensor() {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(LEAK_SENSOR_GPIO_Port, LEAK_SENSOR_Pin) == GPIO_PIN_RESET) {
 8001294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <check_leak_sensor+0x38>)
 800129a:	f001 ffe5 	bl	8003268 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <check_leak_sensor+0x24>
		modbus_discrete_inputs[MODBUS_DI_LEAK] = 1;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <check_leak_sensor+0x3c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 500;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <check_leak_sensor+0x40>)
 80012ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		modbus_discrete_inputs[MODBUS_DI_LEAK] = 0;
		TIM3->CCR1 = 1000;
	}
}
 80012b2:	e006      	b.n	80012c2 <check_leak_sensor+0x32>
		modbus_discrete_inputs[MODBUS_DI_LEAK] = 0;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <check_leak_sensor+0x3c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 1000;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <check_leak_sensor+0x40>)
 80012bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	2000064c 	.word	0x2000064c
 80012d0:	40000400 	.word	0x40000400

080012d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d17b      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x10a>

		/* Motor temperature */
		if (temperatureSensor1.isConnected == 1) {
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d127      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x6a>
			stop_temperature_measure(&temperatureSensor1);
 80012ee:	483e      	ldr	r0, [pc, #248]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012f0:	f7ff ffbc 	bl	800126c <stop_temperature_measure>
			modbus_input_registers[MODBUS_IR_MOTOR_TEMP] = (int16_t)temperatureSensor1.temperature;
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fd4f 	bl	8000d9c <__aeabi_f2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001306:	809a      	strh	r2, [r3, #4]
			start_temperature_measure(&temperatureSensor1);
 8001308:	4837      	ldr	r0, [pc, #220]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800130a:	f7ff ff9d 	bl	8001248 <start_temperature_measure>
			if (temperatureSensor1.temperature > 80.0) {
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4937      	ldr	r1, [pc, #220]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd37 	bl	8000d88 <__aeabi_fcmpgt>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x5c>
				modbus_discrete_inputs[MODBUS_DI_OVERHEAT] = 1;
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001322:	2201      	movs	r2, #1
 8001324:	705a      	strb	r2, [r3, #1]
				TIM4->CCR1 = 1000; // Red LED 1 turned on
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
 800132e:	e00d      	b.n	800134c <HAL_TIM_PeriodElapsedCallback+0x78>
			}
			else {
				modbus_discrete_inputs[MODBUS_DI_OVERHEAT] = 0;
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
				TIM4->CCR1 = 0; // Red LED 1 turned off
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
 800133c:	e006      	b.n	800134c <HAL_TIM_PeriodElapsedCallback+0x78>
			}
		}
		else {
			TIM4->CCR1 = 500;  // Red LED 1  blinks every 500 ms
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001340:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
			config_temperature_sensor(&temperatureSensor1);
 8001346:	4828      	ldr	r0, [pc, #160]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001348:	f7ff ff59 	bl	80011fe <config_temperature_sensor>
		}
		/* Air temperature */
		if (temperatureSensor2.isConnected == 1) {
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d122      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0xc6>
			stop_temperature_measure(&temperatureSensor2);
 8001354:	4829      	ldr	r0, [pc, #164]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001356:	f7ff ff89 	bl	800126c <stop_temperature_measure>
			modbus_input_registers[MODBUS_IR_AIR_TEMP] = (int16_t)temperatureSensor2.temperature;
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fd1c 	bl	8000d9c <__aeabi_f2iz>
 8001364:	4603      	mov	r3, r0
 8001366:	b21b      	sxth	r3, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 800136c:	80da      	strh	r2, [r3, #6]
			start_temperature_measure(&temperatureSensor2);
 800136e:	4823      	ldr	r0, [pc, #140]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001370:	f7ff ff6a 	bl	8001248 <start_temperature_measure>
			if (temperatureSensor1.temperature < 1.0) {
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fce5 	bl	8000d4c <__aeabi_fcmplt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_TIM_PeriodElapsedCallback+0xbe>
				TIM4->CCR2 = 1000; // Red LED 2 turned on
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800138a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
 8001390:	e00a      	b.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else {
				TIM4->CCR2 = 0; // Red LED 2 turned off
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
 8001398:	e006      	b.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
		}
		else {
			TIM4->CCR2 = 500;  // Red LED 2 blinks every 500 ms
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800139c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
			config_temperature_sensor(&temperatureSensor2);
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013a4:	f7ff ff2b 	bl	80011fe <config_temperature_sensor>
		}

		/* check all sensors and turn off/on pump */
		if (modbus_discrete_inputs[MODBUS_DI_LEAK] | modbus_discrete_inputs[MODBUS_DI_OVERHEAT]) {
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <HAL_TIM_PeriodElapsedCallback+0xf8>
			modbus_coils[MODBUS_RELAY_PUMP] = 0;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013c6:	f001 ff66 	bl	8003296 <HAL_GPIO_WritePin>
		else {
			modbus_coils[MODBUS_RELAY_PUMP] = 1;
			HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_SET);
		}
	}
}
 80013ca:	e008      	b.n	80013de <HAL_TIM_PeriodElapsedCallback+0x10a>
			modbus_coils[MODBUS_RELAY_PUMP] = 1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013da:	f001 ff5c 	bl	8003296 <HAL_GPIO_WritePin>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000040c 	.word	0x2000040c
 80013ec:	2000063c 	.word	0x2000063c
 80013f0:	42a00000 	.word	0x42a00000
 80013f4:	2000064c 	.word	0x2000064c
 80013f8:	40000800 	.word	0x40000800
 80013fc:	20000424 	.word	0x20000424
 8001400:	20000648 	.word	0x20000648
 8001404:	40010800 	.word	0x40010800

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f001 fc13 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f873 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 fa61 	bl	80018dc <MX_GPIO_Init>
  MX_SPI1_Init();
 800141a:	f000 f8ab 	bl	8001574 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800141e:	f000 fa09 	bl	8001834 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001422:	f000 fa31 	bl	8001888 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001426:	f000 f8db 	bl	80015e0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800142a:	f000 f981 	bl	8001730 <MX_TIM4_Init>
  MX_TIM3_Init();
 800142e:	f000 f925 	bl	800167c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001432:	2100      	movs	r1, #0
 8001434:	4826      	ldr	r0, [pc, #152]	; (80014d0 <main+0xc8>)
 8001436:	f003 f9d1 	bl	80047dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <main+0xcc>)
 800143e:	f003 f9cd 	bl	80047dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001442:	2104      	movs	r1, #4
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <main+0xcc>)
 8001446:	f003 f9c9 	bl	80047dc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800144a:	4823      	ldr	r0, [pc, #140]	; (80014d8 <main+0xd0>)
 800144c:	f003 f924 	bl	8004698 <HAL_TIM_Base_Start_IT>
  DS18B20_Init(&temperatureSensor1, &huart1);
 8001450:	4922      	ldr	r1, [pc, #136]	; (80014dc <main+0xd4>)
 8001452:	4823      	ldr	r0, [pc, #140]	; (80014e0 <main+0xd8>)
 8001454:	f7ff fec0 	bl	80011d8 <DS18B20_Init>
  DS18B20_Init(&temperatureSensor2, &huart2);
 8001458:	4922      	ldr	r1, [pc, #136]	; (80014e4 <main+0xdc>)
 800145a:	4823      	ldr	r0, [pc, #140]	; (80014e8 <main+0xe0>)
 800145c:	f7ff febc 	bl	80011d8 <DS18B20_Init>
  HAL_Delay(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f001 fc4a 	bl	8002cfc <HAL_Delay>
  Lora_Init();
 8001468:	f001 faf4 	bl	8002a54 <Lora_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t request_size = Lora_Rx(modbus_request);
 800146c:	481f      	ldr	r0, [pc, #124]	; (80014ec <main+0xe4>)
 800146e:	f001 fb29 	bl	8002ac4 <Lora_Rx>
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	if (request_size > 0) {
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d025      	beq.n	80014c8 <main+0xc0>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2120      	movs	r1, #32
 8001480:	481b      	ldr	r0, [pc, #108]	; (80014f0 <main+0xe8>)
 8001482:	f001 ff08 	bl	8003296 <HAL_GPIO_WritePin>

		LoraPacketStatus_t lora_status = Lora_GetPacketStatus();
 8001486:	f001 fa7d 	bl	8002984 <Lora_GetPacketStatus>
 800148a:	4603      	mov	r3, r0
 800148c:	80bb      	strh	r3, [r7, #4]
		modbus_input_registers[MODBUS_IR_RSSI] = (int16_t)lora_status.Rssi;
 800148e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <main+0xec>)
 8001496:	801a      	strh	r2, [r3, #0]
		modbus_input_registers[MODBUS_IR_SNR] = (int16_t)lora_status.Snr;
 8001498:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <main+0xec>)
 80014a0:	805a      	strh	r2, [r3, #2]

		uint8_t response_size = modbus_transaction(request_size);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fba3 	bl	8001bf0 <modbus_transaction>
 80014aa:	4603      	mov	r3, r0
 80014ac:	71bb      	strb	r3, [r7, #6]
		if (response_size > 0) {
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <main+0xb6>
			Lora_Tx(modbus_response, response_size);
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	4619      	mov	r1, r3
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <main+0xf0>)
 80014ba:	f001 fb51 	bl	8002b60 <Lora_Tx>
		}
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <main+0xe8>)
 80014c4:	f001 fee7 	bl	8003296 <HAL_GPIO_WritePin>
	}
	check_leak_sensor();
 80014c8:	f7ff fee2 	bl	8001290 <check_leak_sensor>
  {
 80014cc:	e7ce      	b.n	800146c <main+0x64>
 80014ce:	bf00      	nop
 80014d0:	200002ec 	.word	0x200002ec
 80014d4:	20000334 	.word	0x20000334
 80014d8:	200002a4 	.word	0x200002a4
 80014dc:	2000037c 	.word	0x2000037c
 80014e0:	2000040c 	.word	0x2000040c
 80014e4:	200003c4 	.word	0x200003c4
 80014e8:	20000424 	.word	0x20000424
 80014ec:	2000043c 	.word	0x2000043c
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	2000063c 	.word	0x2000063c
 80014f8:	2000053c 	.word	0x2000053c

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2228      	movs	r2, #40	; 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f004 fa3c 	bl	8005988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001526:	2310      	movs	r3, #16
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fec8 	bl	80032c8 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800153e:	f000 fa2f 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f002 f936 	bl	80037cc <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001566:	f000 fa1b 	bl	80019a0 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3740      	adds	r7, #64	; 0x40
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI1_Init+0x64>)
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_SPI1_Init+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI1_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015a8:	2210      	movs	r2, #16
 80015aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_SPI1_Init+0x64>)
 80015c6:	f002 fa8f 	bl	8003ae8 <HAL_SPI_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 f9e6 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	40013000 	.word	0x40013000

080015e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_TIM2_Init+0x98>)
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_TIM2_Init+0x98>)
 8001606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM2_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_TIM2_Init+0x98>)
 8001614:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001618:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_TIM2_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM2_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM2_Init+0x98>)
 8001628:	f002 ffe6 	bl	80045f8 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001632:	f000 f9b5 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM2_Init+0x98>)
 8001644:	f003 fb36 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800164e:	f000 f9a7 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_TIM2_Init+0x98>)
 8001660:	f003 feb8 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800166a:	f000 f999 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002a4 	.word	0x200002a4

0800167c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_TIM3_Init+0xac>)
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <MX_TIM3_Init+0xb0>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_TIM3_Init+0xac>)
 80016a6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM3_Init+0xac>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_TIM3_Init+0xac>)
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_TIM3_Init+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM3_Init+0xac>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <MX_TIM3_Init+0xac>)
 80016c8:	f003 f838 	bl	800473c <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016d2:	f000 f965 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4619      	mov	r1, r3
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <MX_TIM3_Init+0xac>)
 80016e6:	f003 fe75 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80016f0:	f000 f956 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	; 0x60
 80016f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM3_Init+0xac>)
 800170c:	f003 fa10 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001716:	f000 f943 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM3_Init+0xac>)
 800171c:	f000 fcd2 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002ec 	.word	0x200002ec
 800172c:	40000400 	.word	0x40000400

08001730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_TIM4_Init+0xfc>)
 8001762:	4a33      	ldr	r2, [pc, #204]	; (8001830 <MX_TIM4_Init+0x100>)
 8001764:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <MX_TIM4_Init+0xfc>)
 8001768:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800176c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <MX_TIM4_Init+0xfc>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <MX_TIM4_Init+0xfc>)
 8001776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800177a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_TIM4_Init+0xfc>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <MX_TIM4_Init+0xfc>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001788:	4828      	ldr	r0, [pc, #160]	; (800182c <MX_TIM4_Init+0xfc>)
 800178a:	f002 ff35 	bl	80045f8 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001794:	f000 f904 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4821      	ldr	r0, [pc, #132]	; (800182c <MX_TIM4_Init+0xfc>)
 80017a6:	f003 fa85 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017b0:	f000 f8f6 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <MX_TIM4_Init+0xfc>)
 80017b6:	f002 ffc1 	bl	800473c <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017c0:	f000 f8ee 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4619      	mov	r1, r3
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <MX_TIM4_Init+0xfc>)
 80017d4:	f003 fdfe 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017de:	f000 f8df 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e2:	2360      	movs	r3, #96	; 0x60
 80017e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM4_Init+0xfc>)
 80017fa:	f003 f999 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001804:	f000 f8cc 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2204      	movs	r2, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM4_Init+0xfc>)
 8001810:	f003 f98e 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800181a:	f000 f8c1 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM4_Init+0xfc>)
 8001820:	f000 fc50 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000334 	.word	0x20000334
 8001830:	40000800 	.word	0x40000800

08001834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART1_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800186c:	f003 fe22 	bl	80054b4 <HAL_HalfDuplex_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 f893 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000037c 	.word	0x2000037c
 8001884:	40013800 	.word	0x40013800

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_USART2_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018c0:	f003 fdf8 	bl	80054b4 <HAL_HalfDuplex_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f000 f869 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200003c4 	.word	0x200003c4
 80018d8:	40004400 	.word	0x40004400

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <MX_GPIO_Init+0xb8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <MX_GPIO_Init+0xb8>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <MX_GPIO_Init+0xb8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_GPIO_Init+0xb8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <MX_GPIO_Init+0xb8>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_GPIO_Init+0xb8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_NSS_Pin|RELAY_PUMP_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f248 0118 	movw	r1, #32792	; 0x8018
 8001926:	481c      	ldr	r0, [pc, #112]	; (8001998 <MX_GPIO_Init+0xbc>)
 8001928:	f001 fcb5 	bl	8003296 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	481a      	ldr	r0, [pc, #104]	; (800199c <MX_GPIO_Init+0xc0>)
 8001932:	f001 fcb0 	bl	8003296 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin RELAY_PUMP_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin|RELAY_PUMP_Pin;
 8001936:	f248 0318 	movw	r3, #32792	; 0x8018
 800193a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	4619      	mov	r1, r3
 800194e:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_GPIO_Init+0xbc>)
 8001950:	f001 fb06 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEAK_SENSOR_Pin */
  GPIO_InitStruct.Pin = LEAK_SENSOR_Pin;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LEAK_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4619      	mov	r1, r3
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_GPIO_Init+0xc0>)
 800196a:	f001 faf9 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800196e:	2320      	movs	r3, #32
 8001970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2302      	movs	r3, #2
 800197c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_GPIO_Init+0xc0>)
 8001986:	f001 faeb 	bl	8002f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40010800 	.word	0x40010800
 800199c:	40010c00 	.word	0x40010c00

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <calculate_crc16>:
uint16_t modbus_holding_registers[MODBUS_HR_COUNT];
uint8_t modbus_coils[MODBUS_COILS_COUNT];
uint8_t modbus_discrete_inputs[MODBUS_DI_COUNT];


uint16_t calculate_crc16(uint8_t *msg, uint8_t DataLen) {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
	uint8_t CRCHi = 0xFF;
 80019b8:	23ff      	movs	r3, #255	; 0xff
 80019ba:	73fb      	strb	r3, [r7, #15]
	uint8_t CRCLo = 0xFF;
 80019bc:	23ff      	movs	r3, #255	; 0xff
 80019be:	73bb      	strb	r3, [r7, #14]
	uint8_t i ;
	while (DataLen) {
 80019c0:	e013      	b.n	80019ea <calculate_crc16+0x3e>
		i = CRCHi ^ *msg++ ;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4053      	eors	r3, r2
 80019ce:	737b      	strb	r3, [r7, #13]
		CRCHi = CRCLo ^ srCRCHi[i];
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <calculate_crc16+0x60>)
 80019d4:	5cd2      	ldrb	r2, [r2, r3]
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	4053      	eors	r3, r2
 80019da:	73fb      	strb	r3, [r7, #15]
		CRCLo = srCRCLo[i];
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <calculate_crc16+0x64>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	73bb      	strb	r3, [r7, #14]
		DataLen--;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	70fb      	strb	r3, [r7, #3]
	while (DataLen) {
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e8      	bne.n	80019c2 <calculate_crc16+0x16>
	}
	return (CRCHi << 8 | CRCLo) ;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	b29b      	uxth	r3, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	20000114 	.word	0x20000114

08001a14 <modbus_exception>:
void modbus_exception(ModbusExceptions_t code) {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	modbus_response[FIELD_FUNCTION] = modbus_request[FIELD_FUNCTION] | 0x80;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <modbus_exception+0x28>)
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <modbus_exception+0x2c>)
 8001a2a:	705a      	strb	r2, [r3, #1]
	modbus_response[FIELD_ERROR] = code;
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <modbus_exception+0x2c>)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	7093      	strb	r3, [r2, #2]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000043c 	.word	0x2000043c
 8001a40:	2000053c 	.word	0x2000053c

08001a44 <read_1bit_registers>:
uint8_t read_1bit_registers(uint8_t total_reg_count, uint8_t *registers) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
	uint16_t start = (modbus_request[FIELD_START_ADDR_HI] << 8) | modbus_request[FIELD_START_ADDR_LO];
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <read_1bit_registers+0xd4>)
 8001a52:	789b      	ldrb	r3, [r3, #2]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <read_1bit_registers+0xd4>)
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	823b      	strh	r3, [r7, #16]
	uint16_t count = (modbus_request[FIELD_COUNT_HI] << 8) | modbus_request[FIELD_COUNT_LO];
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <read_1bit_registers+0xd4>)
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <read_1bit_registers+0xd4>)
 8001a6e:	795b      	ldrb	r3, [r3, #5]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	81fb      	strh	r3, [r7, #14]
	if (start + count > MODBUS_DI_COUNT) {
 8001a78:	8a3a      	ldrh	r2, [r7, #16]
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	dd04      	ble.n	8001a8c <read_1bit_registers+0x48>
		modbus_exception(ILLEGAL_DATA_ADDRESS);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff ffc6 	bl	8001a14 <modbus_exception>
		return 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e040      	b.n	8001b0e <read_1bit_registers+0xca>
	}
	modbus_response[FIELD_FUNCTION] = modbus_request[FIELD_FUNCTION];
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <read_1bit_registers+0xd4>)
 8001a8e:	785a      	ldrb	r2, [r3, #1]
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <read_1bit_registers+0xd8>)
 8001a92:	705a      	strb	r2, [r3, #1]
	modbus_response[FIELD_BYTE_COUNT] = 1;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <read_1bit_registers+0xd8>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	709a      	strb	r2, [r3, #2]
	uint8_t p = FIELD_PAYLOAD_START;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	75fb      	strb	r3, [r7, #23]
	uint16_t mask = 0x0001;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = start; i<start+count; i++) {
 8001aa2:	8a3b      	ldrh	r3, [r7, #16]
 8001aa4:	74fb      	strb	r3, [r7, #19]
 8001aa6:	e028      	b.n	8001afa <read_1bit_registers+0xb6>
		if (mask == 0x0100) {
 8001aa8:	8abb      	ldrh	r3, [r7, #20]
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aae:	d10e      	bne.n	8001ace <read_1bit_registers+0x8a>
			mask = 0x0001;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	82bb      	strh	r3, [r7, #20]
			p += 1;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
			modbus_response[p] = 0x00;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <read_1bit_registers+0xd8>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	54d1      	strb	r1, [r2, r3]
			modbus_response[FIELD_BYTE_COUNT] += 1;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <read_1bit_registers+0xd8>)
 8001ac4:	789b      	ldrb	r3, [r3, #2]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <read_1bit_registers+0xd8>)
 8001acc:	709a      	strb	r2, [r3, #2]
		}
		if (registers[i]) {
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <read_1bit_registers+0xaa>
			modbus_response[p] |= (uint8_t)mask;
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <read_1bit_registers+0xd8>)
 8001ade:	5cd1      	ldrb	r1, [r2, r3]
 8001ae0:	8abb      	ldrh	r3, [r7, #20]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	b2d1      	uxtb	r1, r2
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <read_1bit_registers+0xd8>)
 8001aec:	54d1      	strb	r1, [r2, r3]
		}
		mask = mask << 1;
 8001aee:	8abb      	ldrh	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = start; i<start+count; i++) {
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	3301      	adds	r3, #1
 8001af8:	74fb      	strb	r3, [r7, #19]
 8001afa:	7cfa      	ldrb	r2, [r7, #19]
 8001afc:	8a39      	ldrh	r1, [r7, #16]
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	440b      	add	r3, r1
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbd0      	blt.n	8001aa8 <read_1bit_registers+0x64>
	}
	return modbus_response[FIELD_BYTE_COUNT] + 2;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <read_1bit_registers+0xd8>)
 8001b08:	789b      	ldrb	r3, [r3, #2]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	b2db      	uxtb	r3, r3
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000043c 	.word	0x2000043c
 8001b1c:	2000053c 	.word	0x2000053c

08001b20 <read_16bit_registers>:
uint8_t read_16bit_registers(uint8_t total_reg_count, uint16_t *registers) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
	uint16_t start = (modbus_request[FIELD_START_ADDR_HI] << 8) | modbus_request[FIELD_START_ADDR_LO];
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <read_16bit_registers+0xc8>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <read_16bit_registers+0xc8>)
 8001b36:	78db      	ldrb	r3, [r3, #3]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	81bb      	strh	r3, [r7, #12]
	uint16_t count = (modbus_request[FIELD_COUNT_HI] << 8) | modbus_request[FIELD_COUNT_LO];
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <read_16bit_registers+0xc8>)
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <read_16bit_registers+0xc8>)
 8001b4a:	795b      	ldrb	r3, [r3, #5]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	817b      	strh	r3, [r7, #10]
	if (start + count > total_reg_count) {
 8001b54:	89ba      	ldrh	r2, [r7, #12]
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	441a      	add	r2, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dd04      	ble.n	8001b6a <read_16bit_registers+0x4a>
		modbus_exception(ILLEGAL_DATA_ADDRESS);
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7ff ff57 	bl	8001a14 <modbus_exception>
		return 2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e039      	b.n	8001bde <read_16bit_registers+0xbe>
	}
	modbus_response[FIELD_FUNCTION] = modbus_request[FIELD_FUNCTION];
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <read_16bit_registers+0xc8>)
 8001b6c:	785a      	ldrb	r2, [r3, #1]
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <read_16bit_registers+0xcc>)
 8001b70:	705a      	strb	r2, [r3, #1]
	uint8_t p = FIELD_PAYLOAD_START;
 8001b72:	2303      	movs	r3, #3
 8001b74:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=start; i<start+count; i++) {
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	73bb      	strb	r3, [r7, #14]
 8001b7a:	e020      	b.n	8001bbe <read_16bit_registers+0x9e>
		modbus_response[p] = (uint8_t)(registers[i] >> 8);
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	b2d1      	uxtb	r1, r2
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <read_16bit_registers+0xcc>)
 8001b90:	54d1      	strb	r1, [r2, r3]
		modbus_response[p+1] = (uint8_t)(registers[i] & 0xFF);
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2d1      	uxtb	r1, r2
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <read_16bit_registers+0xcc>)
 8001ba4:	54d1      	strb	r1, [r2, r3]
		modbus_response[FIELD_BYTE_COUNT] += 2;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <read_16bit_registers+0xcc>)
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	3302      	adds	r3, #2
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <read_16bit_registers+0xcc>)
 8001bb0:	709a      	strb	r2, [r3, #2]
		p += 2;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=start; i<start+count; i++) {
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73bb      	strb	r3, [r7, #14]
 8001bbe:	7bba      	ldrb	r2, [r7, #14]
 8001bc0:	89b9      	ldrh	r1, [r7, #12]
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	440b      	add	r3, r1
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbd8      	blt.n	8001b7c <read_16bit_registers+0x5c>
	}
	modbus_response[FIELD_BYTE_COUNT] = count << 1;
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <read_16bit_registers+0xcc>)
 8001bd4:	709a      	strb	r2, [r3, #2]
	return modbus_response[FIELD_BYTE_COUNT] + 2;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <read_16bit_registers+0xcc>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	3302      	adds	r3, #2
 8001bdc:	b2db      	uxtb	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000043c 	.word	0x2000043c
 8001bec:	2000053c 	.word	0x2000053c

08001bf0 <modbus_transaction>:

uint8_t modbus_transaction(uint8_t request_size) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	// Check slave address
	if (modbus_request[FIELD_DEVICE_ADDRESS] != MODBUS_DEVICE_ADDRESS) {
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <modbus_transaction+0x138>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <modbus_transaction+0x16>
		return 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e08b      	b.n	8001d1e <modbus_transaction+0x12e>
	}

	// Check request CRC
	uint16_t msg_crc = (modbus_request[request_size - 2] << 8 | modbus_request[request_size - 1]);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <modbus_transaction+0x138>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4944      	ldr	r1, [pc, #272]	; (8001d28 <modbus_transaction+0x138>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	81bb      	strh	r3, [r7, #12]
	uint16_t calc_crc = calculate_crc16(modbus_request, request_size - 2);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	3b02      	subs	r3, #2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	483f      	ldr	r0, [pc, #252]	; (8001d28 <modbus_transaction+0x138>)
 8001c2c:	f7ff febe 	bl	80019ac <calculate_crc16>
 8001c30:	4603      	mov	r3, r0
 8001c32:	817b      	strh	r3, [r7, #10]
	if (msg_crc != calc_crc) {
 8001c34:	89ba      	ldrh	r2, [r7, #12]
 8001c36:	897b      	ldrh	r3, [r7, #10]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <modbus_transaction+0x50>
		return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e06e      	b.n	8001d1e <modbus_transaction+0x12e>
	}

	// Address of this device
	modbus_response[FIELD_DEVICE_ADDRESS] = MODBUS_DEVICE_ADDRESS;
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <modbus_transaction+0x13c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
	uint8_t response_size = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
	// Request processing
	switch(modbus_request[1]) {
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <modbus_transaction+0x138>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d845      	bhi.n	8001ce0 <modbus_transaction+0xf0>
 8001c54:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <modbus_transaction+0x6c>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c89 	.word	0x08001c89
 8001c64:	08001c9d 	.word	0x08001c9d
 8001c68:	08001cb1 	.word	0x08001cb1
 8001c6c:	08001cc5 	.word	0x08001cc5
 8001c70:	08001cd3 	.word	0x08001cd3
	case MODBUS_READ_COILS:
		response_size += read_1bit_registers(MODBUS_COILS_COUNT, modbus_coils);
 8001c74:	492e      	ldr	r1, [pc, #184]	; (8001d30 <modbus_transaction+0x140>)
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fee4 	bl	8001a44 <read_1bit_registers>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	4413      	add	r3, r2
 8001c84:	73fb      	strb	r3, [r7, #15]
		break;
 8001c86:	e032      	b.n	8001cee <modbus_transaction+0xfe>
	case MODBUS_READ_DISCRETE_INPUTS:
		response_size += read_1bit_registers(MODBUS_DI_COUNT, modbus_discrete_inputs);
 8001c88:	492a      	ldr	r1, [pc, #168]	; (8001d34 <modbus_transaction+0x144>)
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	f7ff feda 	bl	8001a44 <read_1bit_registers>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4413      	add	r3, r2
 8001c98:	73fb      	strb	r3, [r7, #15]
		break;
 8001c9a:	e028      	b.n	8001cee <modbus_transaction+0xfe>
	case MODBUS_READ_HOLDING_REGISTERS:
		response_size += read_16bit_registers(MODBUS_HR_COUNT, modbus_holding_registers);
 8001c9c:	4926      	ldr	r1, [pc, #152]	; (8001d38 <modbus_transaction+0x148>)
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff ff3e 	bl	8001b20 <read_16bit_registers>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4413      	add	r3, r2
 8001cac:	73fb      	strb	r3, [r7, #15]
		break;
 8001cae:	e01e      	b.n	8001cee <modbus_transaction+0xfe>
	case MODBUS_READ_INPUT_REGISTERS:
		response_size += read_16bit_registers(MODBUS_IR_COUNT, modbus_input_registers);
 8001cb0:	4922      	ldr	r1, [pc, #136]	; (8001d3c <modbus_transaction+0x14c>)
 8001cb2:	2004      	movs	r0, #4
 8001cb4:	f7ff ff34 	bl	8001b20 <read_16bit_registers>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	73fb      	strb	r3, [r7, #15]
		break;
 8001cc2:	e014      	b.n	8001cee <modbus_transaction+0xfe>
	case MODBUS_WRITE_SINGLE_COIL:
		modbus_exception(ILLEGAL_FUNCTION);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff fea5 	bl	8001a14 <modbus_exception>
		response_size += 2;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	3302      	adds	r3, #2
 8001cce:	73fb      	strb	r3, [r7, #15]
		break;
 8001cd0:	e00d      	b.n	8001cee <modbus_transaction+0xfe>
	case MODBUS_WRITE_SINGLE_REGISTER:
		modbus_exception(ILLEGAL_FUNCTION);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff fe9e 	bl	8001a14 <modbus_exception>
		response_size += 2;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	73fb      	strb	r3, [r7, #15]
		break;
 8001cde:	e006      	b.n	8001cee <modbus_transaction+0xfe>
	default:
		modbus_exception(ILLEGAL_FUNCTION);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff fe97 	bl	8001a14 <modbus_exception>
		response_size += 2;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	73fb      	strb	r3, [r7, #15]
		break;
 8001cec:	bf00      	nop
	}
	// Add response CRC
	uint16_t crc = calculate_crc16(modbus_response, response_size);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <modbus_transaction+0x13c>)
 8001cf4:	f7ff fe5a 	bl	80019ac <calculate_crc16>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	813b      	strh	r3, [r7, #8]
	modbus_response[response_size] = crc >> 8;
 8001cfc:	893b      	ldrh	r3, [r7, #8]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	b2d1      	uxtb	r1, r2
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <modbus_transaction+0x13c>)
 8001d08:	54d1      	strb	r1, [r2, r3]
	modbus_response[response_size+1] = crc & 0xFF;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	893a      	ldrh	r2, [r7, #8]
 8001d10:	b2d1      	uxtb	r1, r2
 8001d12:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <modbus_transaction+0x13c>)
 8001d14:	54d1      	strb	r1, [r2, r3]
	response_size += 2;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	73fb      	strb	r3, [r7, #15]
	return response_size;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000043c 	.word	0x2000043c
 8001d2c:	2000053c 	.word	0x2000053c
 8001d30:	20000648 	.word	0x20000648
 8001d34:	2000064c 	.word	0x2000064c
 8001d38:	20000644 	.word	0x20000644
 8001d3c:	2000063c 	.word	0x2000063c

08001d40 <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t pclk = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  huart->Init.BaudRate = baudrate;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	605a      	str	r2, [r3, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <SetBaudrate+0xcc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d103      	bne.n	8001d66 <SetBaudrate+0x26>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d5e:	f001 fe91 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	e002      	b.n	8001d6c <SetBaudrate+0x2c>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d66:	f001 fe79 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8001d6a:	60f8      	str	r0, [r7, #12]
    }


    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009a      	lsls	r2, r3, #2
 8001d76:	441a      	add	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <SetBaudrate+0xd0>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	0119      	lsls	r1, r3, #4
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	009a      	lsls	r2, r3, #2
 8001d96:	441a      	add	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <SetBaudrate+0xd0>)
 8001da4:	fba3 0302 	umull	r0, r3, r3, r2
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	2064      	movs	r0, #100	; 0x64
 8001dac:	fb00 f303 	mul.w	r3, r0, r3
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	3332      	adds	r3, #50	; 0x32
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <SetBaudrate+0xd0>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc2:	4419      	add	r1, r3
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	009a      	lsls	r2, r3, #2
 8001dce:	441a      	add	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <SetBaudrate+0xd0>)
 8001ddc:	fba3 0302 	umull	r0, r3, r3, r2
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	2064      	movs	r0, #100	; 0x64
 8001de4:	fb00 f303 	mul.w	r3, r0, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	3332      	adds	r3, #50	; 0x32
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <SetBaudrate+0xd0>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	440a      	add	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]

}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	51eb851f 	.word	0x51eb851f

08001e14 <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  uint8_t txData = 0xFF;
 8001e20:	23ff      	movs	r3, #255	; 0xff
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint8_t rxData = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73bb      	strb	r3, [r7, #14]

  if (bit == 0)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <OneWire_ProcessBit+0x1e>
  {
    txData = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8001e32:	f107 010f 	add.w	r1, r7, #15
 8001e36:	230a      	movs	r3, #10
 8001e38:	2201      	movs	r2, #1
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f003 fb92 	bl	8005564 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8001e40:	f107 010e 	add.w	r1, r7, #14
 8001e44:	230a      	movs	r3, #10
 8001e46:	2201      	movs	r2, #1
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f003 fc0e 	bl	800566a <HAL_UART_Receive>

  return rxData;
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  uint8_t rxByte = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73bb      	strb	r3, [r7, #14]
 8001e6c:	e022      	b.n	8001eb4 <OneWire_ProcessByte+0x5c>
  {
    uint8_t txBit = (byte >> i) & 0x01;
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	fa42 f303 	asr.w	r3, r2, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	733b      	strb	r3, [r7, #12]
    uint8_t rxBit = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	737b      	strb	r3, [r7, #13]

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8001e82:	7b3b      	ldrb	r3, [r7, #12]
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffc4 	bl	8001e14 <OneWire_ProcessBit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	72fb      	strb	r3, [r7, #11]

    if (tempRxData == 0xFF)
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	2bff      	cmp	r3, #255	; 0xff
 8001e94:	d101      	bne.n	8001e9a <OneWire_ProcessByte+0x42>
    {
      rxBit = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	737b      	strb	r3, [r7, #13]
    }

    rxByte |= (rxBit << i);
 8001e9a:	7b7a      	ldrb	r2, [r7, #13]
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73bb      	strb	r3, [r7, #14]
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d9d9      	bls.n	8001e6e <OneWire_ProcessByte+0x16>
  }

  return rxByte;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  ONEWIRE_Status status = ONEWIRE_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 8001ed0:	23f0      	movs	r3, #240	; 0xf0
 8001ed2:	73bb      	strb	r3, [r7, #14]
  uint8_t rxByte = 0x00;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	737b      	strb	r3, [r7, #13]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8001ed8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff2f 	bl	8001d40 <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8001ee2:	f107 010e 	add.w	r1, r7, #14
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	2201      	movs	r2, #1
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f003 fb3a 	bl	8005564 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8001ef0:	f107 010d 	add.w	r1, r7, #13
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f003 fbb6 	bl	800566a <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8001efe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff1c 	bl	8001d40 <SetBaudrate>

  if (rxByte == txByte)
 8001f08:	7b7a      	ldrb	r2, [r7, #13]
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d101      	bne.n	8001f14 <OneWire_Reset+0x50>
  {
    status = ONEWIRE_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6193      	str	r3, [r2, #24]
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_MspInit+0x5c>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_MspInit+0x60>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_MspInit+0x60>)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <HAL_SPI_MspInit+0x88>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d12f      	bne.n	8002004 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_SPI_MspInit+0x8c>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fd4:	23a0      	movs	r3, #160	; 0xa0
 8001fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_SPI_MspInit+0x90>)
 8001fe8:	f000 ffba 	bl	8002f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_SPI_MspInit+0x90>)
 8002000:	f000 ffae 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013000 	.word	0x40013000
 8002010:	40021000 	.word	0x40021000
 8002014:	40010800 	.word	0x40010800

08002018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d114      	bne.n	8002054 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	201c      	movs	r0, #28
 8002048:	f000 ff53 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800204c:	201c      	movs	r0, #28
 800204e:	f000 ff6c 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002052:	e010      	b.n	8002076 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_TIM_Base_MspInit+0x6c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10b      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40000800 	.word	0x40000800

08002088 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_TIM_PWM_MspInit+0x34>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_TIM_PWM_MspInit+0x38>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_TIM_PWM_MspInit+0x38>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_TIM_PWM_MspInit+0x38>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_TIM_MspPostInit+0xb8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d12a      	bne.n	800213a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020fc:	2310      	movs	r3, #16
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	481d      	ldr	r0, [pc, #116]	; (8002184 <HAL_TIM_MspPostInit+0xc0>)
 8002110:	f000 ff26 	bl	8002f60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_TIM_MspPostInit+0xc4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <HAL_TIM_MspPostInit+0xc4>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002138:	e01c      	b.n	8002174 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_TIM_MspPostInit+0xc8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d117      	bne.n	8002174 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_TIM_MspPostInit+0xbc>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_TIM_MspPostInit+0xc0>)
 8002170:	f000 fef6 	bl	8002f60 <HAL_GPIO_Init>
}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40000400 	.word	0x40000400
 8002180:	40021000 	.word	0x40021000
 8002184:	40010c00 	.word	0x40010c00
 8002188:	40010000 	.word	0x40010000
 800218c:	40000800 	.word	0x40000800

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <HAL_UART_MspInit+0xc8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d125      	bne.n	80021fc <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_UART_MspInit+0xcc>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e6:	2312      	movs	r3, #18
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	481a      	ldr	r0, [pc, #104]	; (8002260 <HAL_UART_MspInit+0xd0>)
 80021f6:	f000 feb3 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021fa:	e028      	b.n	800224e <HAL_UART_MspInit+0xbe>
  else if(huart->Instance==USART2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_UART_MspInit+0xd4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d123      	bne.n	800224e <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_UART_MspInit+0xcc>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_UART_MspInit+0xcc>)
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_UART_MspInit+0xcc>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_UART_MspInit+0xcc>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_UART_MspInit+0xcc>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_UART_MspInit+0xcc>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002236:	2304      	movs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0318 	add.w	r3, r7, #24
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_UART_MspInit+0xd0>)
 800224a:	f000 fe89 	bl	8002f60 <HAL_GPIO_Init>
}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40013800 	.word	0x40013800
 800225c:	40021000 	.word	0x40021000
 8002260:	40010800 	.word	0x40010800
 8002264:	40004400 	.word	0x40004400

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ae:	f000 fd09 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM2_IRQHandler+0x10>)
 80022be:	f002 fb2f 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200002a4 	.word	0x200002a4

080022cc <Lora_Reset>:
	.CrcMode = LORA_CRC_ON,
	.InvertIQ = LORA_IQ_NORMAL
};
uint32_t frequency = 868000000;

void Lora_Reset() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2108      	movs	r1, #8
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <Lora_Reset+0x28>)
 80022d6:	f000 ffde 	bl	8003296 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80022da:	2014      	movs	r0, #20
 80022dc:	f000 fd0e 	bl	8002cfc <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2108      	movs	r1, #8
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <Lora_Reset+0x28>)
 80022e6:	f000 ffd6 	bl	8003296 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80022ea:	2014      	movs	r0, #20
 80022ec:	f000 fd06 	bl	8002cfc <HAL_Delay>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010800 	.word	0x40010800

080022f8 <Lora_SPIWrite>:

void Lora_SPIWrite(uint8_t size) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	2110      	movs	r1, #16
 8002306:	480a      	ldr	r0, [pc, #40]	; (8002330 <Lora_SPIWrite+0x38>)
 8002308:	f000 ffc5 	bl	8003296 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_tx_buffer, size, 0x1000);
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <Lora_SPIWrite+0x3c>)
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <Lora_SPIWrite+0x40>)
 8002318:	f001 fc6a 	bl	8003bf0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	2110      	movs	r1, #16
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <Lora_SPIWrite+0x38>)
 8002322:	f000 ffb8 	bl	8003296 <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40010800 	.word	0x40010800
 8002334:	20000650 	.word	0x20000650
 8002338:	2000024c 	.word	0x2000024c

0800233c <Lora_SPIRead>:
void Lora_SPIRead(uint8_t size) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	2110      	movs	r1, #16
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <Lora_SPIRead+0x44>)
 800234c:	f000 ffa3 	bl	8003296 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, spi_tx_buffer, 2, 0x1000);
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	2202      	movs	r2, #2
 8002356:	490b      	ldr	r1, [pc, #44]	; (8002384 <Lora_SPIRead+0x48>)
 8002358:	480b      	ldr	r0, [pc, #44]	; (8002388 <Lora_SPIRead+0x4c>)
 800235a:	f001 fc49 	bl	8003bf0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, spi_rx_buffer, size, 0x1000);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	b29a      	uxth	r2, r3
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <Lora_SPIRead+0x50>)
 8002368:	4807      	ldr	r0, [pc, #28]	; (8002388 <Lora_SPIRead+0x4c>)
 800236a:	f001 fd84 	bl	8003e76 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <Lora_SPIRead+0x44>)
 8002374:	f000 ff8f 	bl	8003296 <HAL_GPIO_WritePin>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010800 	.word	0x40010800
 8002384:	20000650 	.word	0x20000650
 8002388:	2000024c 	.word	0x2000024c
 800238c:	20000658 	.word	0x20000658

08002390 <Lora_WriteRegister>:
void Lora_WriteRegister(uint16_t address, uint8_t value) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	80fb      	strh	r3, [r7, #6]
 800239c:	4613      	mov	r3, r2
 800239e:	717b      	strb	r3, [r7, #5]
    spi_tx_buffer[0]= LORA_WRITE_REGISTER;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <Lora_WriteRegister+0x38>)
 80023a2:	220d      	movs	r2, #13
 80023a4:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1]= (address & 0xFF00) >> 8;
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <Lora_WriteRegister+0x38>)
 80023b0:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2]= address & 0x00FF;
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <Lora_WriteRegister+0x38>)
 80023b8:	709a      	strb	r2, [r3, #2]
    Lora_SPIWrite(3);
 80023ba:	2003      	movs	r0, #3
 80023bc:	f7ff ff9c 	bl	80022f8 <Lora_SPIWrite>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000650 	.word	0x20000650

080023cc <Lora_WriteBuffer>:
void Lora_WriteBuffer(uint8_t *buffer, uint8_t offset, uint8_t size) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	2110      	movs	r1, #16
 80023e0:	4811      	ldr	r0, [pc, #68]	; (8002428 <Lora_WriteBuffer+0x5c>)
 80023e2:	f000 ff58 	bl	8003296 <HAL_GPIO_WritePin>
	spi_tx_buffer[0] = LORA_WRITE_BUFFER;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <Lora_WriteBuffer+0x60>)
 80023e8:	220e      	movs	r2, #14
 80023ea:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = offset;
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <Lora_WriteBuffer+0x60>)
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(&hspi1, spi_tx_buffer, 2, 0x1000);
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	2202      	movs	r2, #2
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <Lora_WriteBuffer+0x60>)
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <Lora_WriteBuffer+0x64>)
 80023fc:	f001 fbf8 	bl	8003bf0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buffer, size, 0x1000);
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	b29a      	uxth	r2, r3
 8002404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <Lora_WriteBuffer+0x64>)
 800240c:	f001 fbf0 	bl	8003bf0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2110      	movs	r1, #16
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <Lora_WriteBuffer+0x5c>)
 8002416:	f000 ff3e 	bl	8003296 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 fc6e 	bl	8002cfc <HAL_Delay>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010800 	.word	0x40010800
 800242c:	20000650 	.word	0x20000650
 8002430:	2000024c 	.word	0x2000024c

08002434 <Lora_ReadBuffer>:
void Lora_ReadBuffer(uint8_t *buffer, uint8_t offset, uint8_t size) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
 8002440:	4613      	mov	r3, r2
 8002442:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	2110      	movs	r1, #16
 8002448:	4811      	ldr	r0, [pc, #68]	; (8002490 <Lora_ReadBuffer+0x5c>)
 800244a:	f000 ff24 	bl	8003296 <HAL_GPIO_WritePin>
    spi_tx_buffer[0]= LORA_READ_BUFFER;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <Lora_ReadBuffer+0x60>)
 8002450:	221e      	movs	r2, #30
 8002452:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1]= offset;
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <Lora_ReadBuffer+0x60>)
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2]= 0x00;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <Lora_ReadBuffer+0x60>)
 800245c:	2200      	movs	r2, #0
 800245e:	709a      	strb	r2, [r3, #2]
    HAL_SPI_Transmit(&hspi1, spi_tx_buffer, 3, 0x1000);
 8002460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002464:	2203      	movs	r2, #3
 8002466:	490b      	ldr	r1, [pc, #44]	; (8002494 <Lora_ReadBuffer+0x60>)
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <Lora_ReadBuffer+0x64>)
 800246a:	f001 fbc1 	bl	8003bf0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, 0x1000);
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	b29a      	uxth	r2, r3
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <Lora_ReadBuffer+0x64>)
 800247a:	f001 fcfc 	bl	8003e76 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800247e:	2201      	movs	r2, #1
 8002480:	2110      	movs	r1, #16
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <Lora_ReadBuffer+0x5c>)
 8002484:	f000 ff07 	bl	8003296 <HAL_GPIO_WritePin>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40010800 	.word	0x40010800
 8002494:	20000650 	.word	0x20000650
 8002498:	2000024c 	.word	0x2000024c

0800249c <Lora_SetIrqParams>:

void Lora_SetIrqParams(uint16_t irqMask) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
	spi_tx_buffer[0] = LORA_CFG_DIOIRQ;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <Lora_SetIrqParams+0x38>)
 80024a8:	2208      	movs	r2, #8
 80024aa:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <Lora_SetIrqParams+0x38>)
 80024b6:	705a      	strb	r2, [r3, #1]
	spi_tx_buffer[2] = (uint8_t) (irqMask & 0x00FF);
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <Lora_SetIrqParams+0x38>)
 80024be:	709a      	strb	r2, [r3, #2]
	Lora_SPIWrite(3);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f7ff ff19 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(1);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 fc18 	bl	8002cfc <HAL_Delay>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000650 	.word	0x20000650

080024d8 <Lora_ClearIrqStatus>:
void Lora_ClearIrqStatus(uint16_t irqVal){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
	spi_tx_buffer[0] = LORA_CLR_IRQSTATUS;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <Lora_ClearIrqStatus+0x34>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = (uint8_t)((irqVal >> 8 ) & 0x00FF);
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <Lora_ClearIrqStatus+0x34>)
 80024f2:	705a      	strb	r2, [r3, #1]
	spi_tx_buffer[2] = (uint8_t)(irqVal & 0x00FF);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <Lora_ClearIrqStatus+0x34>)
 80024fa:	709a      	strb	r2, [r3, #2]
    Lora_SPIWrite(3);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f7ff fefb 	bl	80022f8 <Lora_SPIWrite>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000650 	.word	0x20000650

08002510 <Lora_GetIrqStatus>:
uint16_t Lora_GetIrqStatus() {
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
    spi_tx_buffer[0] = LORA_GET_IRQSTATUS;
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <Lora_GetIrqStatus+0x30>)
 8002516:	2212      	movs	r2, #18
 8002518:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = 0;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <Lora_GetIrqStatus+0x30>)
 800251c:	2200      	movs	r2, #0
 800251e:	705a      	strb	r2, [r3, #1]
    Lora_SPIRead(2);
 8002520:	2002      	movs	r0, #2
 8002522:	f7ff ff0b 	bl	800233c <Lora_SPIRead>
    return ( spi_rx_buffer[0] << 8) | spi_rx_buffer[1];
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <Lora_GetIrqStatus+0x34>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b21a      	sxth	r2, r3
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <Lora_GetIrqStatus+0x34>)
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	b21b      	sxth	r3, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	b21b      	sxth	r3, r3
 8002538:	b29b      	uxth	r3, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000650 	.word	0x20000650
 8002544:	20000658 	.word	0x20000658

08002548 <Lora_SetStandby>:
void Lora_SetStandby(LoraStandbyModes_t standbyConfig) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	spi_tx_buffer[0] = LORA_SET_STANDBY;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <Lora_SetStandby+0x2c>)
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = (uint8_t)standbyConfig;
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <Lora_SetStandby+0x2c>)
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	7053      	strb	r3, [r2, #1]
    Lora_SPIWrite(2);
 800255e:	2002      	movs	r0, #2
 8002560:	f7ff feca 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(10);
 8002564:	200a      	movs	r0, #10
 8002566:	f000 fbc9 	bl	8002cfc <HAL_Delay>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000650 	.word	0x20000650

08002578 <Lora_SetRegulatorMode>:
void Lora_SetRegulatorMode(LoraRegulatorMode_t mode) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	spi_tx_buffer[0] = LORA_SET_REGULATORMODE;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <Lora_SetRegulatorMode+0x2c>)
 8002584:	2296      	movs	r2, #150	; 0x96
 8002586:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = mode;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <Lora_SetRegulatorMode+0x2c>)
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	7053      	strb	r3, [r2, #1]
	Lora_SPIWrite(2);
 800258e:	2002      	movs	r0, #2
 8002590:	f7ff feb2 	bl	80022f8 <Lora_SPIWrite>
	HAL_Delay(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f000 fbb1 	bl	8002cfc <HAL_Delay>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000650 	.word	0x20000650

080025a8 <Lora_SetRfSwitchMode>:
void Lora_SetRfSwitchMode(LoraRFSwitch_t mode){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	spi_tx_buffer[0] = LORA_SET_RFSWITCHMODE;
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <Lora_SetRfSwitchMode+0x2c>)
 80025b4:	229d      	movs	r2, #157	; 0x9d
 80025b6:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = mode;
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <Lora_SetRfSwitchMode+0x2c>)
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	7053      	strb	r3, [r2, #1]
	Lora_SPIWrite(2);
 80025be:	2002      	movs	r0, #2
 80025c0:	f7ff fe9a 	bl	80022f8 <Lora_SPIWrite>
	HAL_Delay(10);
 80025c4:	200a      	movs	r0, #10
 80025c6:	f000 fb99 	bl	8002cfc <HAL_Delay>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000650 	.word	0x20000650

080025d8 <Lora_SetPacketType>:
void Lora_SetPacketType(LORAPacketTypes_t packetType) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	spi_tx_buffer[0] = LORA_SET_PACKETTYPE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <Lora_SetPacketType+0x2c>)
 80025e4:	228a      	movs	r2, #138	; 0x8a
 80025e6:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = (uint8_t)packetType;
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <Lora_SetPacketType+0x2c>)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	7053      	strb	r3, [r2, #1]
	Lora_SPIWrite(2);
 80025ee:	2002      	movs	r0, #2
 80025f0:	f7ff fe82 	bl	80022f8 <Lora_SPIWrite>
	HAL_Delay(5);
 80025f4:	2005      	movs	r0, #5
 80025f6:	f000 fb81 	bl	8002cfc <HAL_Delay>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000650 	.word	0x20000650

08002608 <Lora_SetSyncWord>:
void Lora_SetSyncWord() {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  Lora_WriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 800260c:	2114      	movs	r1, #20
 800260e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8002612:	f7ff febd 	bl	8002390 <Lora_WriteRegister>
  HAL_Delay(5);
 8002616:	2005      	movs	r0, #5
 8002618:	f000 fb70 	bl	8002cfc <HAL_Delay>
  Lora_WriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 800261c:	2124      	movs	r1, #36	; 0x24
 800261e:	f240 7041 	movw	r0, #1857	; 0x741
 8002622:	f7ff feb5 	bl	8002390 <Lora_WriteRegister>
  HAL_Delay(5);
 8002626:	2005      	movs	r0, #5
 8002628:	f000 fb68 	bl	8002cfc <HAL_Delay>
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <Lora_Calibrate>:
void Lora_Calibrate() {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	spi_tx_buffer[0] = LORA_CALIBRATE;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <Lora_Calibrate+0x20>)
 8002636:	2289      	movs	r2, #137	; 0x89
 8002638:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = 0x7F;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <Lora_Calibrate+0x20>)
 800263c:	227f      	movs	r2, #127	; 0x7f
 800263e:	705a      	strb	r2, [r3, #1]
	Lora_SPIWrite(2);
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff fe59 	bl	80022f8 <Lora_SPIWrite>
	HAL_Delay(70);
 8002646:	2046      	movs	r0, #70	; 0x46
 8002648:	f000 fb58 	bl	8002cfc <HAL_Delay>
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000650 	.word	0x20000650

08002654 <Lora_CalibrateImage>:
void Lora_CalibrateImage(uint32_t freq) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	spi_tx_buffer[0] = LORA_CALIBRATEIMAGE;
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Lora_CalibrateImage+0x90>)
 800265e:	2298      	movs	r2, #152	; 0x98
 8002660:	701a      	strb	r2, [r3, #0]
    if (freq > 900000000) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <Lora_CalibrateImage+0x94>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d906      	bls.n	8002678 <Lora_CalibrateImage+0x24>
    	spi_tx_buffer[1] = 0xE1;
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <Lora_CalibrateImage+0x90>)
 800266c:	22e1      	movs	r2, #225	; 0xe1
 800266e:	705a      	strb	r2, [r3, #1]
    	spi_tx_buffer[2] = 0xE9;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <Lora_CalibrateImage+0x90>)
 8002672:	22e9      	movs	r2, #233	; 0xe9
 8002674:	709a      	strb	r2, [r3, #2]
 8002676:	e02a      	b.n	80026ce <Lora_CalibrateImage+0x7a>
    } else if (freq > 850000000) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <Lora_CalibrateImage+0x98>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d906      	bls.n	800268e <Lora_CalibrateImage+0x3a>
    	spi_tx_buffer[1] = 0xD7;
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <Lora_CalibrateImage+0x90>)
 8002682:	22d7      	movs	r2, #215	; 0xd7
 8002684:	705a      	strb	r2, [r3, #1]
    	spi_tx_buffer[2] = 0xD8;
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <Lora_CalibrateImage+0x90>)
 8002688:	22d8      	movs	r2, #216	; 0xd8
 800268a:	709a      	strb	r2, [r3, #2]
 800268c:	e01f      	b.n	80026ce <Lora_CalibrateImage+0x7a>
    } else if (freq > 770000000) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <Lora_CalibrateImage+0x9c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d906      	bls.n	80026a4 <Lora_CalibrateImage+0x50>
    	spi_tx_buffer[1] = 0xC1;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <Lora_CalibrateImage+0x90>)
 8002698:	22c1      	movs	r2, #193	; 0xc1
 800269a:	705a      	strb	r2, [r3, #1]
    	spi_tx_buffer[2] = 0xC5;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <Lora_CalibrateImage+0x90>)
 800269e:	22c5      	movs	r2, #197	; 0xc5
 80026a0:	709a      	strb	r2, [r3, #2]
 80026a2:	e014      	b.n	80026ce <Lora_CalibrateImage+0x7a>
    } else if (freq > 460000000) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <Lora_CalibrateImage+0xa0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d906      	bls.n	80026ba <Lora_CalibrateImage+0x66>
    	spi_tx_buffer[1] = 0x75;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <Lora_CalibrateImage+0x90>)
 80026ae:	2275      	movs	r2, #117	; 0x75
 80026b0:	705a      	strb	r2, [r3, #1]
    	spi_tx_buffer[2] = 0x81;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <Lora_CalibrateImage+0x90>)
 80026b4:	2281      	movs	r2, #129	; 0x81
 80026b6:	709a      	strb	r2, [r3, #2]
 80026b8:	e009      	b.n	80026ce <Lora_CalibrateImage+0x7a>
    } else if (freq > 425000000) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <Lora_CalibrateImage+0xa4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d905      	bls.n	80026ce <Lora_CalibrateImage+0x7a>
    	spi_tx_buffer[1] = 0x6B;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <Lora_CalibrateImage+0x90>)
 80026c4:	226b      	movs	r2, #107	; 0x6b
 80026c6:	705a      	strb	r2, [r3, #1]
    	spi_tx_buffer[2] = 0x6F;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <Lora_CalibrateImage+0x90>)
 80026ca:	226f      	movs	r2, #111	; 0x6f
 80026cc:	709a      	strb	r2, [r3, #2]
    }
    Lora_SPIWrite(3);
 80026ce:	2003      	movs	r0, #3
 80026d0:	f7ff fe12 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(70);
 80026d4:	2046      	movs	r0, #70	; 0x46
 80026d6:	f000 fb11 	bl	8002cfc <HAL_Delay>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000650 	.word	0x20000650
 80026e8:	35a4e900 	.word	0x35a4e900
 80026ec:	32a9f880 	.word	0x32a9f880
 80026f0:	2de54480 	.word	0x2de54480
 80026f4:	1b6b0b00 	.word	0x1b6b0b00
 80026f8:	1954fc40 	.word	0x1954fc40

080026fc <Lora_SetRxBoosted>:
void Lora_SetRxBoosted(uint32_t timeout) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    Lora_WriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 8002704:	2196      	movs	r1, #150	; 0x96
 8002706:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800270a:	f7ff fe41 	bl	8002390 <Lora_WriteRegister>
    spi_tx_buffer[0] = LORA_SET_RX;
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <Lora_SetRxBoosted+0x44>)
 8002710:	2282      	movs	r2, #130	; 0x82
 8002712:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = (uint8_t) ((timeout >> 16) & 0xFF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <Lora_SetRxBoosted+0x44>)
 800271c:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = (uint8_t) ((timeout >> 8) & 0xFF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <Lora_SetRxBoosted+0x44>)
 8002726:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = (uint8_t) (timeout & 0xFF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <Lora_SetRxBoosted+0x44>)
 800272e:	70da      	strb	r2, [r3, #3]
    Lora_SPIWrite(4);
 8002730:	2004      	movs	r0, #4
 8002732:	f7ff fde1 	bl	80022f8 <Lora_SPIWrite>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000650 	.word	0x20000650

08002744 <Lora_SetTx>:
    spi_tx_buffer[1] = (uint8_t) ((timeout >> 16) & 0xFF);
    spi_tx_buffer[2] = (uint8_t) ((timeout >> 8) & 0xFF);
	spi_tx_buffer[3] = (uint8_t) (timeout & 0xFF);
	Lora_SPIWrite(4);
}
void Lora_SetTx(uint32_t timeout) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	spi_tx_buffer[0] = LORA_SET_TX;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <Lora_SetTx+0x38>)
 800274e:	2283      	movs	r2, #131	; 0x83
 8002750:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = (uint8_t) ((timeout >> 16) & 0xFF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <Lora_SetTx+0x38>)
 800275a:	705a      	strb	r2, [r3, #1]
	spi_tx_buffer[2] = (uint8_t) ((timeout >> 8) & 0xFF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <Lora_SetTx+0x38>)
 8002764:	709a      	strb	r2, [r3, #2]
	spi_tx_buffer[3] = (uint8_t) (timeout & 0xFF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <Lora_SetTx+0x38>)
 800276c:	70da      	strb	r2, [r3, #3]
	Lora_SPIWrite(4);
 800276e:	2004      	movs	r0, #4
 8002770:	f7ff fdc2 	bl	80022f8 <Lora_SPIWrite>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000650 	.word	0x20000650

08002780 <Lora_SetTxParams>:
	spi_tx_buffer[3] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
	spi_tx_buffer[4] = ( uint8_t )( timeout & 0xFF );
	Lora_SPIWrite(5);
    HAL_Delay(10);
}
void Lora_SetTxParams(int8_t power, LORARampTimes_t rampTime) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	460a      	mov	r2, r1
 800278a:	71fb      	strb	r3, [r7, #7]
 800278c:	4613      	mov	r3, r2
 800278e:	71bb      	strb	r3, [r7, #6]
	spi_tx_buffer[0] = LORA_SET_PACONFIG;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <Lora_SetTxParams+0x64>)
 8002792:	2295      	movs	r2, #149	; 0x95
 8002794:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = 0x04; //paDutyCycle
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <Lora_SetTxParams+0x64>)
 8002798:	2204      	movs	r2, #4
 800279a:	705a      	strb	r2, [r3, #1]
	spi_tx_buffer[2] = 0x07; //hpMax:0x00~0x07; 7:22dbm
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <Lora_SetTxParams+0x64>)
 800279e:	2207      	movs	r2, #7
 80027a0:	709a      	strb	r2, [r3, #2]
	spi_tx_buffer[3] = 0x00; //deviceSel: 0: SX1262; 1: SX1261
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <Lora_SetTxParams+0x64>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	70da      	strb	r2, [r3, #3]
	spi_tx_buffer[4] = 0x01;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <Lora_SetTxParams+0x64>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	711a      	strb	r2, [r3, #4]
	Lora_SPIWrite(7);
 80027ae:	2007      	movs	r0, #7
 80027b0:	f7ff fda2 	bl	80022f8 <Lora_SPIWrite>

    Lora_WriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 80027b4:	2138      	movs	r1, #56	; 0x38
 80027b6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80027ba:	f7ff fde9 	bl	8002390 <Lora_WriteRegister>

    spi_tx_buffer[0] = LORA_SET_TXPARAMS;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <Lora_SetTxParams+0x64>)
 80027c0:	228e      	movs	r2, #142	; 0x8e
 80027c2:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = (uint8_t)power;
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <Lora_SetTxParams+0x64>)
 80027c8:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = (uint8_t)rampTime;
 80027ca:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <Lora_SetTxParams+0x64>)
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	7093      	strb	r3, [r2, #2]
    Lora_SPIWrite(3);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f7ff fd91 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(20);
 80027d6:	2014      	movs	r0, #20
 80027d8:	f000 fa90 	bl	8002cfc <HAL_Delay>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000650 	.word	0x20000650

080027e8 <Lora_SetModulationParams>:
void Lora_SetModulationParams(LoraModulationParams_t *modulationParams) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    uint8_t LowDatarateOptimize;
    switch (modulationParams->Bandwidth) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	2b0a      	cmp	r3, #10
 80027f6:	d847      	bhi.n	8002888 <Lora_SetModulationParams+0xa0>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <Lora_SetModulationParams+0x18>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002883 	.word	0x08002883
 8002804:	08002883 	.word	0x08002883
 8002808:	08002883 	.word	0x08002883
 800280c:	0800285b 	.word	0x0800285b
 8002810:	08002847 	.word	0x08002847
 8002814:	08002833 	.word	0x08002833
 8002818:	0800282d 	.word	0x0800282d
 800281c:	08002889 	.word	0x08002889
 8002820:	08002883 	.word	0x08002883
 8002824:	08002883 	.word	0x08002883
 8002828:	0800286f 	.word	0x0800286f
    case LORA_BW_500:
      LowDatarateOptimize = 0x00;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e02b      	b.n	800288a <Lora_SetModulationParams+0xa2>
    case LORA_BW_250:
      if (modulationParams->SpreadingFactor == 12)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d102      	bne.n	8002840 <Lora_SetModulationParams+0x58>
        LowDatarateOptimize = 0x01;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      else
        LowDatarateOptimize = 0x00;
      break;
 800283e:	e024      	b.n	800288a <Lora_SetModulationParams+0xa2>
        LowDatarateOptimize = 0x00;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e021      	b.n	800288a <Lora_SetModulationParams+0xa2>
    case LORA_BW_125:
      if (modulationParams->SpreadingFactor >= 11)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d902      	bls.n	8002854 <Lora_SetModulationParams+0x6c>
        LowDatarateOptimize = 0x01;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      else
        LowDatarateOptimize = 0x00;
      break;
 8002852:	e01a      	b.n	800288a <Lora_SetModulationParams+0xa2>
        LowDatarateOptimize = 0x00;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e017      	b.n	800288a <Lora_SetModulationParams+0xa2>
    case LORA_BW_062:
      if (modulationParams->SpreadingFactor >= 10)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b09      	cmp	r3, #9
 8002860:	d902      	bls.n	8002868 <Lora_SetModulationParams+0x80>
        LowDatarateOptimize = 0x01;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      else
        LowDatarateOptimize = 0x00;
      break;
 8002866:	e010      	b.n	800288a <Lora_SetModulationParams+0xa2>
        LowDatarateOptimize = 0x00;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
      break;
 800286c:	e00d      	b.n	800288a <Lora_SetModulationParams+0xa2>
    case LORA_BW_041:
      if (modulationParams->SpreadingFactor >= 9)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d902      	bls.n	800287c <Lora_SetModulationParams+0x94>
        LowDatarateOptimize = 0x01;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      else
        LowDatarateOptimize = 0x00;
      break;
 800287a:	e006      	b.n	800288a <Lora_SetModulationParams+0xa2>
        LowDatarateOptimize = 0x00;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e003      	b.n	800288a <Lora_SetModulationParams+0xa2>
    case LORA_BW_031:
    case LORA_BW_020:
    case LORA_BW_015:
    case LORA_BW_010:
    case LORA_BW_007:
      LowDatarateOptimize = 0x01;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      break;
 8002886:	e000      	b.n	800288a <Lora_SetModulationParams+0xa2>
    default:
      break;
 8002888:	bf00      	nop
    }
    spi_tx_buffer[0] = LORA_SET_MODULATIONPARAMS;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <Lora_SetModulationParams+0xdc>)
 800288c:	228b      	movs	r2, #139	; 0x8b
 800288e:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = modulationParams->SpreadingFactor;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <Lora_SetModulationParams+0xdc>)
 8002896:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = modulationParams->Bandwidth;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	785a      	ldrb	r2, [r3, #1]
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <Lora_SetModulationParams+0xdc>)
 800289e:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = modulationParams->CodingRate;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	789a      	ldrb	r2, [r3, #2]
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <Lora_SetModulationParams+0xdc>)
 80028a6:	70da      	strb	r2, [r3, #3]
    spi_tx_buffer[4] = LowDatarateOptimize;
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <Lora_SetModulationParams+0xdc>)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	7113      	strb	r3, [r2, #4]
    Lora_SPIWrite(5);
 80028ae:	2005      	movs	r0, #5
 80028b0:	f7ff fd22 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(20);
 80028b4:	2014      	movs	r0, #20
 80028b6:	f000 fa21 	bl	8002cfc <HAL_Delay>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000650 	.word	0x20000650

080028c8 <Lora_SetPacketParams>:
void Lora_SetPacketParams(LoraPacketParams_t *packetParams) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    spi_tx_buffer[0] = LORA_SET_PACKETPARAMS;
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <Lora_SetPacketParams+0x5c>)
 80028d2:	228c      	movs	r2, #140	; 0x8c
 80028d4:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = (packetParams->PreambleLength >> 8) & 0xFF;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <Lora_SetPacketParams+0x5c>)
 80028e2:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = packetParams->PreambleLength;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <Lora_SetPacketParams+0x5c>)
 80028ec:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = packetParams->HeaderType;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	789a      	ldrb	r2, [r3, #2]
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <Lora_SetPacketParams+0x5c>)
 80028f4:	70da      	strb	r2, [r3, #3]
    spi_tx_buffer[4] = packetParams->PayloadLength;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	78da      	ldrb	r2, [r3, #3]
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <Lora_SetPacketParams+0x5c>)
 80028fc:	711a      	strb	r2, [r3, #4]
    spi_tx_buffer[5] = packetParams->CrcMode;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	791a      	ldrb	r2, [r3, #4]
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <Lora_SetPacketParams+0x5c>)
 8002904:	715a      	strb	r2, [r3, #5]
    spi_tx_buffer[6] = packetParams->InvertIQ;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	795a      	ldrb	r2, [r3, #5]
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <Lora_SetPacketParams+0x5c>)
 800290c:	719a      	strb	r2, [r3, #6]
    Lora_SPIWrite(7);
 800290e:	2007      	movs	r0, #7
 8002910:	f7ff fcf2 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(20);
 8002914:	2014      	movs	r0, #20
 8002916:	f000 f9f1 	bl	8002cfc <HAL_Delay>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000650 	.word	0x20000650

08002928 <Lora_SetBufferBaseAddresses>:
void Lora_SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	71bb      	strb	r3, [r7, #6]
    spi_tx_buffer[0] = LORA_SET_BUFFERBASEADDRESS;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <Lora_SetBufferBaseAddresses+0x38>)
 800293a:	228f      	movs	r2, #143	; 0x8f
 800293c:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = txBaseAddress;
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <Lora_SetBufferBaseAddresses+0x38>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = rxBaseAddress;
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <Lora_SetBufferBaseAddresses+0x38>)
 8002946:	79bb      	ldrb	r3, [r7, #6]
 8002948:	7093      	strb	r3, [r2, #2]
    Lora_SPIWrite(3);
 800294a:	2003      	movs	r0, #3
 800294c:	f7ff fcd4 	bl	80022f8 <Lora_SPIWrite>
    HAL_Delay(10);
 8002950:	200a      	movs	r0, #10
 8002952:	f000 f9d3 	bl	8002cfc <HAL_Delay>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000650 	.word	0x20000650

08002964 <Lora_GetRxBufferStatus>:
void Lora_GetRxBufferStatus() {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	spi_tx_buffer[0] = LORA_GET_RXBUFFERSTATUS;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <Lora_GetRxBufferStatus+0x1c>)
 800296a:	2213      	movs	r2, #19
 800296c:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = 0;
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <Lora_GetRxBufferStatus+0x1c>)
 8002970:	2200      	movs	r2, #0
 8002972:	705a      	strb	r2, [r3, #1]
	Lora_SPIRead(2);
 8002974:	2002      	movs	r0, #2
 8002976:	f7ff fce1 	bl	800233c <Lora_SPIRead>
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000650 	.word	0x20000650

08002984 <Lora_GetPacketStatus>:
LoraPacketStatus_t Lora_GetPacketStatus() {
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
	spi_tx_buffer[0] = LORA_GET_PACKETSTATUS;
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <Lora_GetPacketStatus+0x50>)
 800298c:	2214      	movs	r2, #20
 800298e:	701a      	strb	r2, [r3, #0]
	spi_tx_buffer[1] = 0;
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <Lora_GetPacketStatus+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	705a      	strb	r2, [r3, #1]
	Lora_SPIRead(3);
 8002996:	2003      	movs	r0, #3
 8002998:	f7ff fcd0 	bl	800233c <Lora_SPIRead>
	LoraPacketStatus_t status;
	status.Rssi = -(spi_rx_buffer[0] >> 1);
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <Lora_GetPacketStatus+0x54>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	425b      	negs	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	703b      	strb	r3, [r7, #0]
	status.Snr = spi_rx_buffer[1] >> 2;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <Lora_GetPacketStatus+0x54>)
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	707b      	strb	r3, [r7, #1]
	return status;
 80029b8:	883b      	ldrh	r3, [r7, #0]
 80029ba:	80bb      	strh	r3, [r7, #4]
 80029bc:	2300      	movs	r3, #0
 80029be:	793a      	ldrb	r2, [r7, #4]
 80029c0:	f362 0307 	bfi	r3, r2, #0, #8
 80029c4:	797a      	ldrb	r2, [r7, #5]
 80029c6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000650 	.word	0x20000650
 80029d8:	20000658 	.word	0x20000658
 80029dc:	00000000 	.word	0x00000000

080029e0 <Lora_SetFrequency>:
void Lora_SetFrequency(uint32_t frequency) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    uint32_t freq = (uint32_t) ((double) frequency / (double) FREQ_STEP);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fd fda7 	bl	800053c <__aeabi_ui2d>
 80029ee:	a316      	add	r3, pc, #88	; (adr r3, 8002a48 <Lora_SetFrequency+0x68>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd ff46 	bl	8000884 <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f828 	bl	8000a54 <__aeabi_d2uiz>
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
    spi_tx_buffer[0] = LORA_SET_RFFREQUENCY;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <Lora_SetFrequency+0x70>)
 8002a0a:	2286      	movs	r2, #134	; 0x86
 8002a0c:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = (uint8_t) ((freq >> 24) & 0xFF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0e1b      	lsrs	r3, r3, #24
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <Lora_SetFrequency+0x70>)
 8002a16:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = (uint8_t) ((freq >> 16) & 0xFF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <Lora_SetFrequency+0x70>)
 8002a20:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = (uint8_t) ((freq >> 8) & 0xFF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <Lora_SetFrequency+0x70>)
 8002a2a:	70da      	strb	r2, [r3, #3]
    spi_tx_buffer[4] = (uint8_t) (freq & 0xFF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <Lora_SetFrequency+0x70>)
 8002a32:	711a      	strb	r2, [r3, #4]
    Lora_SPIWrite(5);
 8002a34:	2005      	movs	r0, #5
 8002a36:	f7ff fc5f 	bl	80022f8 <Lora_SPIWrite>
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	3fee8480 	.word	0x3fee8480
 8002a50:	20000650 	.word	0x20000650

08002a54 <Lora_Init>:
void Lora_Init() {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	Lora_Reset();
 8002a58:	f7ff fc38 	bl	80022cc <Lora_Reset>
    Lora_SetStandby(STDBY_RC);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fd73 	bl	8002548 <Lora_SetStandby>
    Lora_SetRegulatorMode(USE_LDO);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff fd88 	bl	8002578 <Lora_SetRegulatorMode>
    Lora_SetRfSwitchMode(RF_SW_ON);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7ff fd9d 	bl	80025a8 <Lora_SetRfSwitchMode>
//    Lora_SetDio3AsTcxoCtrl(TCXO_CTRL_3_3V, 192 );
    Lora_Calibrate();
 8002a6e:	f7ff fddf 	bl	8002630 <Lora_Calibrate>
	Lora_CalibrateImage(frequency);
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <Lora_Init+0x64>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fdec 	bl	8002654 <Lora_CalibrateImage>
	Lora_SetPacketType(PACKET_TYPE_LORA);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7ff fdab 	bl	80025d8 <Lora_SetPacketType>
	Lora_SetSyncWord();
 8002a82:	f7ff fdc1 	bl	8002608 <Lora_SetSyncWord>
	Lora_SetTxParams(20, LORA_RAMP_200_US);
 8002a86:	2104      	movs	r1, #4
 8002a88:	2014      	movs	r0, #20
 8002a8a:	f7ff fe79 	bl	8002780 <Lora_SetTxParams>
	Lora_SetModulationParams(&LoraModulation);
 8002a8e:	480b      	ldr	r0, [pc, #44]	; (8002abc <Lora_Init+0x68>)
 8002a90:	f7ff feaa 	bl	80027e8 <Lora_SetModulationParams>
	Lora_SetPacketParams(&LoraPacket);
 8002a94:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <Lora_Init+0x6c>)
 8002a96:	f7ff ff17 	bl	80028c8 <Lora_SetPacketParams>
	Lora_SetFrequency(frequency);
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <Lora_Init+0x64>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff9e 	bl	80029e0 <Lora_SetFrequency>
	Lora_SetBufferBaseAddresses(0x00, 0x00); //same FIFO for RX and TX
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff ff3e 	bl	8002928 <Lora_SetBufferBaseAddresses>
	Lora_SetStandby(STDBY_RC);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fd4b 	bl	8002548 <Lora_SetStandby>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000220 	.word	0x20000220
 8002abc:	20000214 	.word	0x20000214
 8002ac0:	20000218 	.word	0x20000218

08002ac4 <Lora_Rx>:
uint8_t Lora_Rx(uint8_t *data) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	if (LoraPacket.PayloadLength != 255) {
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <Lora_Rx+0x94>)
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	2bff      	cmp	r3, #255	; 0xff
 8002ad2:	d005      	beq.n	8002ae0 <Lora_Rx+0x1c>
		LoraPacket.PayloadLength = 255;
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <Lora_Rx+0x94>)
 8002ad6:	22ff      	movs	r2, #255	; 0xff
 8002ad8:	70da      	strb	r2, [r3, #3]
		Lora_SetPacketParams(&LoraPacket);
 8002ada:	481f      	ldr	r0, [pc, #124]	; (8002b58 <Lora_Rx+0x94>)
 8002adc:	f7ff fef4 	bl	80028c8 <Lora_SetPacketParams>
	}
	Lora_ClearIrqStatus(IRQ_ALL);
 8002ae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ae4:	f7ff fcf8 	bl	80024d8 <Lora_ClearIrqStatus>
	Lora_SetIrqParams(IRQ_RX_DONE | IRQ_CRC_ERROR);
 8002ae8:	2042      	movs	r0, #66	; 0x42
 8002aea:	f7ff fcd7 	bl	800249c <Lora_SetIrqParams>
	Lora_SetRxBoosted(0);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff fe04 	bl	80026fc <Lora_SetRxBoosted>
	uint16_t timeout = 1000;
 8002af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af8:	81fb      	strh	r3, [r7, #14]
	while(timeout) {
 8002afa:	e025      	b.n	8002b48 <Lora_Rx+0x84>
		uint16_t irqRegs = Lora_GetIrqStatus();
 8002afc:	f7ff fd08 	bl	8002510 <Lora_GetIrqStatus>
 8002b00:	4603      	mov	r3, r0
 8002b02:	81bb      	strh	r3, [r7, #12]
		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE) {
 8002b04:	89bb      	ldrh	r3, [r7, #12]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <Lora_Rx+0x78>
			if((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR) {
 8002b0e:	89bb      	ldrh	r3, [r7, #12]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <Lora_Rx+0x58>
				return 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e019      	b.n	8002b50 <Lora_Rx+0x8c>
			}
			else {
				Lora_GetRxBufferStatus();
 8002b1c:	f7ff ff22 	bl	8002964 <Lora_GetRxBufferStatus>
				uint8_t size = spi_rx_buffer[0];
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <Lora_Rx+0x98>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	72fb      	strb	r3, [r7, #11]
				uint8_t offset = spi_rx_buffer[1];
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <Lora_Rx+0x98>)
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	72bb      	strb	r3, [r7, #10]
				Lora_ReadBuffer(data, offset, size);
 8002b2c:	7afa      	ldrb	r2, [r7, #11]
 8002b2e:	7abb      	ldrb	r3, [r7, #10]
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fc7e 	bl	8002434 <Lora_ReadBuffer>
				return size;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	e009      	b.n	8002b50 <Lora_Rx+0x8c>
			}
		}
		HAL_Delay(1);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f000 f8dd 	bl	8002cfc <HAL_Delay>
		timeout--;
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	81fb      	strh	r3, [r7, #14]
	while(timeout) {
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1d6      	bne.n	8002afc <Lora_Rx+0x38>
	}
	return 0;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000218 	.word	0x20000218
 8002b5c:	20000658 	.word	0x20000658

08002b60 <Lora_Tx>:
void Lora_Tx(uint8_t *data, uint8_t size) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
	if (LoraPacket.PayloadLength != size) {
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <Lora_Tx+0x7c>)
 8002b6e:	78db      	ldrb	r3, [r3, #3]
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d005      	beq.n	8002b82 <Lora_Tx+0x22>
		LoraPacket.PayloadLength = size;
 8002b76:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <Lora_Tx+0x7c>)
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	70d3      	strb	r3, [r2, #3]
		Lora_SetPacketParams(&LoraPacket);
 8002b7c:	4817      	ldr	r0, [pc, #92]	; (8002bdc <Lora_Tx+0x7c>)
 8002b7e:	f7ff fea3 	bl	80028c8 <Lora_SetPacketParams>
	}
	Lora_WriteBuffer(data, 0, size);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	461a      	mov	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fc1f 	bl	80023cc <Lora_WriteBuffer>
	Lora_SetIrqParams(IRQ_TX_DONE);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7ff fc84 	bl	800249c <Lora_SetIrqParams>
	Lora_ClearIrqStatus(IRQ_ALL);
 8002b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b98:	f7ff fc9e 	bl	80024d8 <Lora_ClearIrqStatus>
	Lora_SetTx(0);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fdd1 	bl	8002744 <Lora_SetTx>
	uint16_t timeout = 1000;
 8002ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba6:	81fb      	strh	r3, [r7, #14]
	while(timeout) {
 8002ba8:	e00e      	b.n	8002bc8 <Lora_Tx+0x68>
		uint16_t irqRegs = Lora_GetIrqStatus();
 8002baa:	f7ff fcb1 	bl	8002510 <Lora_GetIrqStatus>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	81bb      	strh	r3, [r7, #12]
		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE) {
 8002bb2:	89bb      	ldrh	r3, [r7, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <Lora_Tx+0x70>
			break;
		}
		HAL_Delay(1);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f000 f89d 	bl	8002cfc <HAL_Delay>
		timeout--;
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	81fb      	strh	r3, [r7, #14]
	while(timeout) {
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ed      	bne.n	8002baa <Lora_Tx+0x4a>
	}
}
 8002bce:	e000      	b.n	8002bd2 <Lora_Tx+0x72>
			break;
 8002bd0:	bf00      	nop
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000218 	.word	0x20000218

08002be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bec:	f7ff fff8 	bl	8002be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480b      	ldr	r0, [pc, #44]	; (8002c20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bf2:	490c      	ldr	r1, [pc, #48]	; (8002c24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c08:	4c09      	ldr	r4, [pc, #36]	; (8002c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c16:	f002 febf 	bl	8005998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c1a:	f7fe fbf5 	bl	8001408 <main>
  bx lr
 8002c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002c28:	08005a2c 	.word	0x08005a2c
  ldr r2, =_sbss
 8002c2c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002c30:	20000664 	.word	0x20000664

08002c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC1_2_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_Init+0x28>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_Init+0x28>)
 8002c42:	f043 0310 	orr.w	r3, r3, #16
 8002c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 f947 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff f964 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f95f 	bl	8002f46 <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	f000 f927 	bl	8002ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000224 	.word	0x20000224
 8002cbc:	2000022c 	.word	0x2000022c
 8002cc0:	20000228 	.word	0x20000228

08002cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	2000022c 	.word	0x2000022c
 8002ce4:	20000660 	.word	0x20000660

08002ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_GetTick+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000660 	.word	0x20000660

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffe0 	bl	8002ce8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000022c 	.word	0x2000022c

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4906      	ldr	r1, [pc, #24]	; (8002ddc <__NVIC_EnableIRQ+0x34>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0a      	blt.n	8002e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <__NVIC_SetPriority+0x4c>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e08:	e00a      	b.n	8002e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <__NVIC_SetPriority+0x50>)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3b04      	subs	r3, #4
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f1c3 0307 	rsb	r3, r3, #7
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	bf28      	it	cs
 8002e52:	2304      	movcs	r3, #4
 8002e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d902      	bls.n	8002e64 <NVIC_EncodePriority+0x30>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b03      	subs	r3, #3
 8002e62:	e000      	b.n	8002e66 <NVIC_EncodePriority+0x32>
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	4313      	orrs	r3, r2
         );
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebc:	f7ff ff90 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff2d 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f04:	f7ff ff42 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7ff ff90 	bl	8002e34 <NVIC_EncodePriority>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff5f 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff35 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ffa2 	bl	8002e98 <SysTick_Config>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b08b      	sub	sp, #44	; 0x2c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f72:	e169      	b.n	8003248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f74:	2201      	movs	r2, #1
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f040 8158 	bne.w	8003242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a9a      	ldr	r2, [pc, #616]	; (8003200 <HAL_GPIO_Init+0x2a0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d05e      	beq.n	800305a <HAL_GPIO_Init+0xfa>
 8002f9c:	4a98      	ldr	r2, [pc, #608]	; (8003200 <HAL_GPIO_Init+0x2a0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d875      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fa2:	4a98      	ldr	r2, [pc, #608]	; (8003204 <HAL_GPIO_Init+0x2a4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d058      	beq.n	800305a <HAL_GPIO_Init+0xfa>
 8002fa8:	4a96      	ldr	r2, [pc, #600]	; (8003204 <HAL_GPIO_Init+0x2a4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d86f      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fae:	4a96      	ldr	r2, [pc, #600]	; (8003208 <HAL_GPIO_Init+0x2a8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d052      	beq.n	800305a <HAL_GPIO_Init+0xfa>
 8002fb4:	4a94      	ldr	r2, [pc, #592]	; (8003208 <HAL_GPIO_Init+0x2a8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d869      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fba:	4a94      	ldr	r2, [pc, #592]	; (800320c <HAL_GPIO_Init+0x2ac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04c      	beq.n	800305a <HAL_GPIO_Init+0xfa>
 8002fc0:	4a92      	ldr	r2, [pc, #584]	; (800320c <HAL_GPIO_Init+0x2ac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d863      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fc6:	4a92      	ldr	r2, [pc, #584]	; (8003210 <HAL_GPIO_Init+0x2b0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d046      	beq.n	800305a <HAL_GPIO_Init+0xfa>
 8002fcc:	4a90      	ldr	r2, [pc, #576]	; (8003210 <HAL_GPIO_Init+0x2b0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d85d      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d82a      	bhi.n	800302c <HAL_GPIO_Init+0xcc>
 8002fd6:	2b12      	cmp	r3, #18
 8002fd8:	d859      	bhi.n	800308e <HAL_GPIO_Init+0x12e>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_GPIO_Init+0x80>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	0800305b 	.word	0x0800305b
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	08003047 	.word	0x08003047
 8002fec:	08003089 	.word	0x08003089
 8002ff0:	0800308f 	.word	0x0800308f
 8002ff4:	0800308f 	.word	0x0800308f
 8002ff8:	0800308f 	.word	0x0800308f
 8002ffc:	0800308f 	.word	0x0800308f
 8003000:	0800308f 	.word	0x0800308f
 8003004:	0800308f 	.word	0x0800308f
 8003008:	0800308f 	.word	0x0800308f
 800300c:	0800308f 	.word	0x0800308f
 8003010:	0800308f 	.word	0x0800308f
 8003014:	0800308f 	.word	0x0800308f
 8003018:	0800308f 	.word	0x0800308f
 800301c:	0800308f 	.word	0x0800308f
 8003020:	0800308f 	.word	0x0800308f
 8003024:	0800303d 	.word	0x0800303d
 8003028:	08003051 	.word	0x08003051
 800302c:	4a79      	ldr	r2, [pc, #484]	; (8003214 <HAL_GPIO_Init+0x2b4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003032:	e02c      	b.n	800308e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	623b      	str	r3, [r7, #32]
          break;
 800303a:	e029      	b.n	8003090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	3304      	adds	r3, #4
 8003042:	623b      	str	r3, [r7, #32]
          break;
 8003044:	e024      	b.n	8003090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	3308      	adds	r3, #8
 800304c:	623b      	str	r3, [r7, #32]
          break;
 800304e:	e01f      	b.n	8003090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	330c      	adds	r3, #12
 8003056:	623b      	str	r3, [r7, #32]
          break;
 8003058:	e01a      	b.n	8003090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003062:	2304      	movs	r3, #4
 8003064:	623b      	str	r3, [r7, #32]
          break;
 8003066:	e013      	b.n	8003090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003070:	2308      	movs	r3, #8
 8003072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	611a      	str	r2, [r3, #16]
          break;
 800307a:	e009      	b.n	8003090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800307c:	2308      	movs	r3, #8
 800307e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	615a      	str	r2, [r3, #20]
          break;
 8003086:	e003      	b.n	8003090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
          break;
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x130>
          break;
 800308e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2bff      	cmp	r3, #255	; 0xff
 8003094:	d801      	bhi.n	800309a <HAL_GPIO_Init+0x13a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	e001      	b.n	800309e <HAL_GPIO_Init+0x13e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2bff      	cmp	r3, #255	; 0xff
 80030a4:	d802      	bhi.n	80030ac <HAL_GPIO_Init+0x14c>
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x152>
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	3b08      	subs	r3, #8
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	210f      	movs	r1, #15
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	6a39      	ldr	r1, [r7, #32]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80b1 	beq.w	8003242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_GPIO_Init+0x2b8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_GPIO_Init+0x2b8>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_GPIO_Init+0x2b8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030f8:	4a48      	ldr	r2, [pc, #288]	; (800321c <HAL_GPIO_Init+0x2bc>)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_GPIO_Init+0x2c0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_GPIO_Init+0x1ec>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3f      	ldr	r2, [pc, #252]	; (8003224 <HAL_GPIO_Init+0x2c4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00d      	beq.n	8003148 <HAL_GPIO_Init+0x1e8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3e      	ldr	r2, [pc, #248]	; (8003228 <HAL_GPIO_Init+0x2c8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <HAL_GPIO_Init+0x1e4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <HAL_GPIO_Init+0x2cc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_GPIO_Init+0x1e0>
 800313c:	2303      	movs	r3, #3
 800313e:	e006      	b.n	800314e <HAL_GPIO_Init+0x1ee>
 8003140:	2304      	movs	r3, #4
 8003142:	e004      	b.n	800314e <HAL_GPIO_Init+0x1ee>
 8003144:	2302      	movs	r3, #2
 8003146:	e002      	b.n	800314e <HAL_GPIO_Init+0x1ee>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_GPIO_Init+0x1ee>
 800314c:	2300      	movs	r3, #0
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	f002 0203 	and.w	r2, r2, #3
 8003154:	0092      	lsls	r2, r2, #2
 8003156:	4093      	lsls	r3, r2
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800315e:	492f      	ldr	r1, [pc, #188]	; (800321c <HAL_GPIO_Init+0x2bc>)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	492c      	ldr	r1, [pc, #176]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	43db      	mvns	r3, r3
 800318e:	4928      	ldr	r1, [pc, #160]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 8003190:	4013      	ands	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4922      	ldr	r1, [pc, #136]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60cb      	str	r3, [r1, #12]
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	491e      	ldr	r1, [pc, #120]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4918      	ldr	r1, [pc, #96]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	43db      	mvns	r3, r3
 80031de:	4914      	ldr	r1, [pc, #80]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d021      	beq.n	8003234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_GPIO_Init+0x2d0>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
 80031fc:	e021      	b.n	8003242 <HAL_GPIO_Init+0x2e2>
 80031fe:	bf00      	nop
 8003200:	10320000 	.word	0x10320000
 8003204:	10310000 	.word	0x10310000
 8003208:	10220000 	.word	0x10220000
 800320c:	10210000 	.word	0x10210000
 8003210:	10120000 	.word	0x10120000
 8003214:	10110000 	.word	0x10110000
 8003218:	40021000 	.word	0x40021000
 800321c:	40010000 	.word	0x40010000
 8003220:	40010800 	.word	0x40010800
 8003224:	40010c00 	.word	0x40010c00
 8003228:	40011000 	.word	0x40011000
 800322c:	40011400 	.word	0x40011400
 8003230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_GPIO_Init+0x304>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	43db      	mvns	r3, r3
 800323c:	4909      	ldr	r1, [pc, #36]	; (8003264 <HAL_GPIO_Init+0x304>)
 800323e:	4013      	ands	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	3301      	adds	r3, #1
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	f47f ae8e 	bne.w	8002f74 <HAL_GPIO_Init+0x14>
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	372c      	adds	r7, #44	; 0x2c
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e001      	b.n	800328a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	807b      	strh	r3, [r7, #2]
 80032a2:	4613      	mov	r3, r2
 80032a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a6:	787b      	ldrb	r3, [r7, #1]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032b2:	e003      	b.n	80032bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	041a      	lsls	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e272      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f4:	4b8f      	ldr	r3, [pc, #572]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
 8003300:	4b8c      	ldr	r3, [pc, #560]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b89      	ldr	r3, [pc, #548]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x12c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e24c      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x76>
 8003330:	4b80      	ldr	r3, [pc, #512]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7f      	ldr	r2, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b7b      	ldr	r3, [pc, #492]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7a      	ldr	r2, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b78      	ldr	r3, [pc, #480]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a77      	ldr	r2, [pc, #476]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a71      	ldr	r2, [pc, #452]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a67      	ldr	r2, [pc, #412]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff fca0 	bl	8002ce8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7ff fc9c 	bl	8002ce8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e200      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe4>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7ff fc8c 	bl	8002ce8 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7ff fc88 	bl	8002ce8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1ec      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x10c>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c0      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4939      	ldr	r1, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7ff fc41 	bl	8002ce8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7ff fc3d 	bl	8002ce8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4927      	ldr	r1, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7ff fc20 	bl	8002ce8 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7ff fc1c 	bl	8002ce8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e180      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03a      	beq.n	800354c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7ff fc00 	bl	8002ce8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7ff fbfc 	bl	8002ce8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e160      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800350a:	2001      	movs	r0, #1
 800350c:	f000 face 	bl	8003aac <RCC_Delay>
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7ff fbe6 	bl	8002ce8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7ff fbe2 	bl	8002ce8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d908      	bls.n	8003540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e146      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	42420000 	.word	0x42420000
 800353c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e9      	bne.n	8003520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a6 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8b      	ldr	r3, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a87      	ldr	r2, [pc, #540]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7e      	ldr	r2, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7ff fba3 	bl	8002ce8 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7ff fb9f 	bl	8002ce8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e103      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x312>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x334>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a69      	ldr	r2, [pc, #420]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x356>
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7ff fb53 	bl	8002ce8 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7ff fb4f 	bl	8002ce8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x37e>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7ff fb3d 	bl	8002ce8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7ff fb39 	bl	8002ce8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d061      	beq.n	8003780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d146      	bne.n	8003752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7ff fb0d 	bl	8002ce8 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7ff fb09 	bl	8002ce8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e06d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4921      	ldr	r1, [pc, #132]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a19      	ldr	r1, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	430b      	orrs	r3, r1
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7ff fadd 	bl	8002ce8 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7ff fad9 	bl	8002ce8 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x46a>
 8003750:	e035      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7ff fac6 	bl	8002ce8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7ff fac2 	bl	8002ce8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e026      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x498>
 800377e:	e01e      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e019      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x500>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d0      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4965      	ldr	r1, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800384a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d040      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d115      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e073      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4936      	ldr	r1, [pc, #216]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7ff fa14 	bl	8002ce8 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7ff fa10 	bl	8002ce8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e053      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d210      	bcs.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4922      	ldr	r1, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1cc>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1d0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f972 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	080059f8 	.word	0x080059f8
 8003998:	20000224 	.word	0x20000224
 800399c:	20000228 	.word	0x20000228

080039a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ce:	e027      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	e027      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c9b      	lsrs	r3, r3, #18
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0c5b      	lsrs	r3, r3, #17
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	693b      	ldr	r3, [r7, #16]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	08005a10 	.word	0x08005a10
 8003a40:	08005a20 	.word	0x08005a20
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000224 	.word	0x20000224

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08005a08 	.word	0x08005a08

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a88:	f7ff ffde 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	0adb      	lsrs	r3, r3, #11
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4903      	ldr	r1, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08005a08 	.word	0x08005a08

08003aac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCC_Delay+0x34>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <RCC_Delay+0x38>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ac8:	bf00      	nop
  }
  while (Delay --);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	60fa      	str	r2, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f9      	bne.n	8003ac8 <RCC_Delay+0x1c>
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	20000224 	.word	0x20000224
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e076      	b.n	8003be8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0a:	d009      	beq.n	8003b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fe fa22 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	ea42 0103 	orr.w	r1, r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	0c1a      	lsrs	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f002 0204 	and.w	r2, r2, #4
 8003bc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_SPI_Transmit+0x22>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e12d      	b.n	8003e6e <HAL_SPI_Transmit+0x27e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1a:	f7ff f865 	bl	8002ce8 <HAL_GetTick>
 8003c1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c34:	e116      	b.n	8003e64 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_Transmit+0x52>
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c46:	e10d      	b.n	8003e64 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d007      	beq.n	8003cce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d14f      	bne.n	8003d78 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Transmit+0xf6>
 8003ce0:	8afb      	ldrh	r3, [r7, #22]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d142      	bne.n	8003d6c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d0a:	e02f      	b.n	8003d6c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d112      	bne.n	8003d40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c9a      	adds	r2, r3, #2
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d3e:	e015      	b.n	8003d6c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d40:	f7fe ffd2 	bl	8002ce8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d803      	bhi.n	8003d58 <HAL_SPI_Transmit+0x168>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d56:	d102      	bne.n	8003d5e <HAL_SPI_Transmit+0x16e>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d6a:	e07b      	b.n	8003e64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ca      	bne.n	8003d0c <HAL_SPI_Transmit+0x11c>
 8003d76:	e050      	b.n	8003e1a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_Transmit+0x196>
 8003d80:	8afb      	ldrh	r3, [r7, #22]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d144      	bne.n	8003e10 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dac:	e030      	b.n	8003e10 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d113      	bne.n	8003de4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003de2:	e015      	b.n	8003e10 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de4:	f7fe ff80 	bl	8002ce8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d803      	bhi.n	8003dfc <HAL_SPI_Transmit+0x20c>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfa:	d102      	bne.n	8003e02 <HAL_SPI_Transmit+0x212>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e0e:	e029      	b.n	8003e64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1c9      	bne.n	8003dae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	6839      	ldr	r1, [r7, #0]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fbcc 	bl	80045bc <SPI_EndRxTxTransaction>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e003      	b.n	8003e64 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b088      	sub	sp, #32
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e9a:	e0fb      	b.n	8004094 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea4:	d112      	bne.n	8003ecc <HAL_SPI_Receive+0x56>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10e      	bne.n	8003ecc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f8ef 	bl	80040a6 <HAL_SPI_TransmitReceive>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	e0e8      	b.n	800409e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Receive+0x64>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0e1      	b.n	800409e <HAL_SPI_Receive+0x228>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee2:	f7fe ff01 	bl	8002ce8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_SPI_Receive+0x7e>
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ef8:	e0cc      	b.n	8004094 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2204      	movs	r2, #4
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f40:	d10f      	bne.n	8003f62 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d007      	beq.n	8003f80 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d16a      	bne.n	800405e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f88:	e032      	b.n	8003ff0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d115      	bne.n	8003fc4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f103 020c 	add.w	r2, r3, #12
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc2:	e015      	b.n	8003ff0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc4:	f7fe fe90 	bl	8002ce8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d803      	bhi.n	8003fdc <HAL_SPI_Receive+0x166>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fda:	d102      	bne.n	8003fe2 <HAL_SPI_Receive+0x16c>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003fee:	e051      	b.n	8004094 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1c7      	bne.n	8003f8a <HAL_SPI_Receive+0x114>
 8003ffa:	e035      	b.n	8004068 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d113      	bne.n	8004032 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	b292      	uxth	r2, r2
 8004016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004030:	e015      	b.n	800405e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004032:	f7fe fe59 	bl	8002ce8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d803      	bhi.n	800404a <HAL_SPI_Receive+0x1d4>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d102      	bne.n	8004050 <HAL_SPI_Receive+0x1da>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800405c:	e01a      	b.n	8004094 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1c9      	bne.n	8003ffc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	6839      	ldr	r1, [r7, #0]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fa53 	bl	8004518 <SPI_EndRxTransaction>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
 800408a:	e003      	b.n	8004094 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b08c      	sub	sp, #48	; 0x30
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040b4:	2301      	movs	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x26>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e198      	b.n	80043fe <HAL_SPI_TransmitReceive+0x358>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d4:	f7fe fe08 	bl	8002ce8 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d00f      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x70>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fc:	d107      	bne.n	800410e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <HAL_SPI_TransmitReceive+0x68>
 8004106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800410a:	2b04      	cmp	r3, #4
 800410c:	d003      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800410e:	2302      	movs	r3, #2
 8004110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004114:	e16d      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x82>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x82>
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800412e:	e160      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b04      	cmp	r3, #4
 800413a:	d003      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2205      	movs	r2, #5
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	887a      	ldrh	r2, [r7, #2]
 800415a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d007      	beq.n	8004198 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	d17c      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x10a>
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d16a      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d4:	e057      	b.n	8004286 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d11b      	bne.n	800421c <HAL_SPI_TransmitReceive+0x176>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_SPI_TransmitReceive+0x176>
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d113      	bne.n	800421c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	881a      	ldrh	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	1c9a      	adds	r2, r3, #2
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d119      	bne.n	800425e <HAL_SPI_TransmitReceive+0x1b8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d014      	beq.n	800425e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	b292      	uxth	r2, r2
 8004240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800425a:	2301      	movs	r3, #1
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800425e:	f7fe fd43 	bl	8002ce8 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426a:	429a      	cmp	r2, r3
 800426c:	d80b      	bhi.n	8004286 <HAL_SPI_TransmitReceive+0x1e0>
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d007      	beq.n	8004286 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004284:	e0b5      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1a2      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x130>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d19d      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x130>
 800429a:	e080      	b.n	800439e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x204>
 80042a4:	8b7b      	ldrh	r3, [r7, #26]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d16f      	bne.n	800438a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d0:	e05b      	b.n	800438a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d11c      	bne.n	800431a <HAL_SPI_TransmitReceive+0x274>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <HAL_SPI_TransmitReceive+0x274>
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d114      	bne.n	800431a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d119      	bne.n	800435c <HAL_SPI_TransmitReceive+0x2b6>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d014      	beq.n	800435c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004358:	2301      	movs	r3, #1
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800435c:	f7fe fcc4 	bl	8002ce8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004368:	429a      	cmp	r2, r3
 800436a:	d803      	bhi.n	8004374 <HAL_SPI_TransmitReceive+0x2ce>
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004372:	d102      	bne.n	800437a <HAL_SPI_TransmitReceive+0x2d4>
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004388:	e033      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d19e      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x22c>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d199      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f90a 	bl	80045bc <SPI_EndRxTxTransaction>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043ba:	e01a      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e8:	e003      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3730      	adds	r7, #48	; 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004418:	f7fe fc66 	bl	8002ce8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4413      	add	r3, r2
 8004426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004428:	f7fe fc5e 	bl	8002ce8 <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442e:	4b39      	ldr	r3, [pc, #228]	; (8004514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	015b      	lsls	r3, r3, #5
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443e:	e054      	b.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004446:	d050      	beq.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004448:	f7fe fc4e 	bl	8002ce8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d902      	bls.n	800445e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d13d      	bne.n	80044da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d111      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d004      	beq.n	800448c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448a:	d107      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d10f      	bne.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e017      	b.n	800450a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d19b      	bne.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000224 	.word	0x20000224

08004518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452c:	d111      	bne.n	8004552 <SPI_EndRxTransaction+0x3a>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d004      	beq.n	8004542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d107      	bne.n	8004552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004550:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455a:	d117      	bne.n	800458c <SPI_EndRxTransaction+0x74>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d112      	bne.n	800458c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	2101      	movs	r1, #1
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff49 	bl	8004408 <SPI_WaitFlagStateUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01a      	beq.n	80045b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e013      	b.n	80045b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff ff36 	bl	8004408 <SPI_WaitFlagStateUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e000      	b.n	80045b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff18 	bl	8004408 <SPI_WaitFlagStateUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e000      	b.n	80045f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e041      	b.n	800468e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd fcfa 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 fc28 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e03a      	b.n	8004726 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIM_Base_Start_IT+0x98>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d009      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_TIM_Base_Start_IT+0x9c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_TIM_Base_Start_IT+0xa0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d010      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e007      	b.n	8004724 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800

0800473c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e041      	b.n	80047d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fc90 	bl	8002088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f000 fb86 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start+0x24>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e022      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d109      	bne.n	800481a <HAL_TIM_PWM_Start+0x3e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e015      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d109      	bne.n	8004834 <HAL_TIM_PWM_Start+0x58>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e008      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e05e      	b.n	800490c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start+0x82>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	e013      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b04      	cmp	r3, #4
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0x92>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486c:	e00b      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0xa2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	e003      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd7c 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <HAL_TIM_PWM_Start+0x138>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d107      	bne.n	80048ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_TIM_PWM_Start+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xfa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d009      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xfa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <HAL_TIM_PWM_Start+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xfa>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a12      	ldr	r2, [pc, #72]	; (800491c <HAL_TIM_PWM_Start+0x140>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d111      	bne.n	80048fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d010      	beq.n	800490a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e007      	b.n	800490a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800

08004920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0202 	mvn.w	r2, #2
 800494c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa76 	bl	8004e54 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa69 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa78 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0204 	mvn.w	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa4c 	bl	8004e54 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa3f 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa4e 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa22 	bl	8004e54 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa15 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa24 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9f8 	bl	8004e54 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9eb 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f9fa 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0201 	mvn.w	r2, #1
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fc18 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fce9 	bl	80054a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9be 	bl	8004e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0220 	mvn.w	r2, #32
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fcb4 	bl	8005490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ae      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	f200 809f 	bhi.w	8004c9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004c9d 	.word	0x08004c9d
 8004b6c:	08004c9d 	.word	0x08004c9d
 8004b70:	08004c9d 	.word	0x08004c9d
 8004b74:	08004bd9 	.word	0x08004bd9
 8004b78:	08004c9d 	.word	0x08004c9d
 8004b7c:	08004c9d 	.word	0x08004c9d
 8004b80:	08004c9d 	.word	0x08004c9d
 8004b84:	08004c1b 	.word	0x08004c1b
 8004b88:	08004c9d 	.word	0x08004c9d
 8004b8c:	08004c9d 	.word	0x08004c9d
 8004b90:	08004c9d 	.word	0x08004c9d
 8004b94:	08004c5b 	.word	0x08004c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f9d6 	bl	8004f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
      break;
 8004bd6:	e064      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa1c 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6999      	ldr	r1, [r3, #24]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	619a      	str	r2, [r3, #24]
      break;
 8004c18:	e043      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa65 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0208 	orr.w	r2, r2, #8
 8004c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0204 	bic.w	r2, r2, #4
 8004c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69d9      	ldr	r1, [r3, #28]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	61da      	str	r2, [r3, #28]
      break;
 8004c58:	e023      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 faaf 	bl	80051c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	61da      	str	r2, [r3, #28]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0b4      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x186>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d08:	d03e      	beq.n	8004d88 <HAL_TIM_ConfigClockSource+0xd4>
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0e:	f200 8087 	bhi.w	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d16:	f000 8086 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x172>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d87f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d01a      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0xa6>
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d87b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d050      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x11a>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d877      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b50      	cmp	r3, #80	; 0x50
 8004d32:	d03c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xfa>
 8004d34:	2b50      	cmp	r3, #80	; 0x50
 8004d36:	d873      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d058      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x13a>
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d86f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d064      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d86b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d060      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d867      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d05a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	e062      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6a:	f000 faf0 	bl	800534e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	609a      	str	r2, [r3, #8]
      break;
 8004d86:	e04f      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d98:	f000 fad9 	bl	800534e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004daa:	609a      	str	r2, [r3, #8]
      break;
 8004dac:	e03c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f000 fa50 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2150      	movs	r1, #80	; 0x50
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 faa7 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e02c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fa6e 	bl	80052bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2160      	movs	r1, #96	; 0x60
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa97 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004dec:	e01c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fa30 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa87 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e00c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 fa7e 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004e1e:	e003      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e000      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
	...

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <TIM_Base_SetConfig+0xbc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <TIM_Base_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <TIM_Base_SetConfig+0xbc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <TIM_Base_SetConfig+0xc0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800

08004f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 0201 	bic.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0302 	bic.w	r3, r3, #2
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f023 0210 	bic.w	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <TIM_OC2_SetConfig+0xd0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <TIM_OC2_SetConfig+0xd0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40012c00 	.word	0x40012c00

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10d      	bne.n	800516a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00

080051c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800520e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0f      	ldr	r2, [pc, #60]	; (800525c <TIM_OC4_SetConfig+0x98>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d109      	bne.n	8005238 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00

08005260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 030a 	bic.w	r3, r3, #10
 800529c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0210 	bic.w	r2, r3, #16
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	031b      	lsls	r3, r3, #12
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005368:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	021a      	lsls	r2, r3, #8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	431a      	orrs	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e046      	b.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a10      	ldr	r2, [pc, #64]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10c      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800

08005490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e04a      	b.n	800555c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc fe58 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	; 0x24
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9b7 	bl	800586c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800550c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800551c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0208 	orr.w	r2, r2, #8
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	d16d      	bne.n	8005660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_UART_Transmit+0x2c>
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e066      	b.n	8005662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2221      	movs	r2, #33	; 0x21
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055a2:	f7fd fba1 	bl	8002ce8 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d108      	bne.n	80055d0 <HAL_UART_Transmit+0x6c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e003      	b.n	80055d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d8:	e02a      	b.n	8005630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8d2 	bl	800578e <UART_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e036      	b.n	8005662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	3302      	adds	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cf      	bne.n	80055da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8a2 	bl	800578e <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08a      	sub	sp, #40	; 0x28
 800566e:	af02      	add	r7, sp, #8
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b20      	cmp	r3, #32
 8005688:	d17c      	bne.n	8005784 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_Receive+0x2c>
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e075      	b.n	8005786 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2222      	movs	r2, #34	; 0x22
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ae:	f7fd fb1b 	bl	8002ce8 <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Receive+0x72>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056e4:	e043      	b.n	800576e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2120      	movs	r1, #32
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f84c 	bl	800578e <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e042      	b.n	8005786 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005712:	b29a      	uxth	r2, r3
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3302      	adds	r3, #2
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e01f      	b.n	8005760 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005728:	d007      	beq.n	800573a <HAL_UART_Receive+0xd0>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <HAL_UART_Receive+0xde>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e008      	b.n	800575a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005754:	b2da      	uxtb	r2, r3
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3301      	adds	r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1b6      	bne.n	80056e6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b090      	sub	sp, #64	; 0x40
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579e:	e050      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d04c      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0x30>
 80057ae:	f7fd fa9b 	bl	8002ce8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d241      	bcs.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057de:	637a      	str	r2, [r7, #52]	; 0x34
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3314      	adds	r3, #20
 80057f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	613b      	str	r3, [r7, #16]
   return(result);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005812:	623a      	str	r2, [r7, #32]
 8005814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	69f9      	ldr	r1, [r7, #28]
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d09f      	beq.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3740      	adds	r7, #64	; 0x40
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058a6:	f023 030c 	bic.w	r3, r3, #12
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <UART_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d103      	bne.n	80058dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fe f8d6 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	e002      	b.n	80058e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe f8be 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80058e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009a      	lsls	r2, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <UART_SetConfig+0x118>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	0119      	lsls	r1, r3, #4
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009a      	lsls	r2, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fbb2 f2f3 	udiv	r2, r2, r3
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <UART_SetConfig+0x118>)
 800591a:	fba3 0302 	umull	r0, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2064      	movs	r0, #100	; 0x64
 8005922:	fb00 f303 	mul.w	r3, r0, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	3332      	adds	r3, #50	; 0x32
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <UART_SetConfig+0x118>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005938:	4419      	add	r1, r3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009a      	lsls	r2, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <UART_SetConfig+0x118>)
 8005952:	fba3 0302 	umull	r0, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2064      	movs	r0, #100	; 0x64
 800595a:	fb00 f303 	mul.w	r3, r0, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	3332      	adds	r3, #50	; 0x32
 8005964:	4a07      	ldr	r2, [pc, #28]	; (8005984 <UART_SetConfig+0x118>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	440a      	add	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40013800 	.word	0x40013800
 8005984:	51eb851f 	.word	0x51eb851f

08005988 <memset>:
 8005988:	4603      	mov	r3, r0
 800598a:	4402      	add	r2, r0
 800598c:	4293      	cmp	r3, r2
 800598e:	d100      	bne.n	8005992 <memset+0xa>
 8005990:	4770      	bx	lr
 8005992:	f803 1b01 	strb.w	r1, [r3], #1
 8005996:	e7f9      	b.n	800598c <memset+0x4>

08005998 <__libc_init_array>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	2600      	movs	r6, #0
 800599c:	4d0c      	ldr	r5, [pc, #48]	; (80059d0 <__libc_init_array+0x38>)
 800599e:	4c0d      	ldr	r4, [pc, #52]	; (80059d4 <__libc_init_array+0x3c>)
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	42a6      	cmp	r6, r4
 80059a6:	d109      	bne.n	80059bc <__libc_init_array+0x24>
 80059a8:	f000 f81a 	bl	80059e0 <_init>
 80059ac:	2600      	movs	r6, #0
 80059ae:	4d0a      	ldr	r5, [pc, #40]	; (80059d8 <__libc_init_array+0x40>)
 80059b0:	4c0a      	ldr	r4, [pc, #40]	; (80059dc <__libc_init_array+0x44>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	42a6      	cmp	r6, r4
 80059b8:	d105      	bne.n	80059c6 <__libc_init_array+0x2e>
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c0:	4798      	blx	r3
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7ee      	b.n	80059a4 <__libc_init_array+0xc>
 80059c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ca:	4798      	blx	r3
 80059cc:	3601      	adds	r6, #1
 80059ce:	e7f2      	b.n	80059b6 <__libc_init_array+0x1e>
 80059d0:	08005a24 	.word	0x08005a24
 80059d4:	08005a24 	.word	0x08005a24
 80059d8:	08005a24 	.word	0x08005a24
 80059dc:	08005a28 	.word	0x08005a28

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
